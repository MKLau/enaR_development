C                         *** NETWRK 4.2b ***
C                  *** A NETWORK ANALYSIS PACKAGE ***
C           COPYRIGHT 1982,1987,1998,1999,2002 R. E. ULANOWICZ
C 
C    THIS PACKAGE OF ROUTINES PERFORMS FOUR BASIC ANALYSES OF AN
C    ARBITRARY DIRECTED, WEIGHTED DIGRAPH, SUCH AS AN ECOSYSTEM WEB OF
C    FLOWS. FIRST, AN INPUT-OUTPUT ANALYSIS IS PERFORMED AFTER PATTEN
C    ET AL.(VOL 4). NEXT, THE UNDERLYING TROPHIC STRUCTURE IS ILLUMINED
C    AFTER ANY CYCLES IN THE FEEDING WEB HAVE BEEN EXTRACTED. THEN THE
C    GLOBAL INFORMATION INDICIES FOR THE NETWORK ARE REPORTED. FINALLY,
C    THE FULL SUITE OF CYCLES IS ANALYSED, AND THE GRAPH OF FLOWS IS
C    SEPARATED INTO A ONCE-THROUGH TREE AND A COMPOSITE NEXUS OF
C    CYCLES. IN- MIGRATION IS TREATED DIFFERENTLY THAN PRIMARY INPUTS.
C     STANDARD SCOR FORMAT IS USED FOR INPUT.
C 
C  M IS 3 GREATER THAN THE MAXIMUM NUMBER OF COMPARTMENTS TO BE TREATED.
C  (37 IN THIS INSTANCE) IF MORE STORAGE IS REQUIRED, CHANGE THE NEXT
C  PARAMETER STATEMENT AND THE CORRESPONDING ONES IN SUBROUTINES ASCEND
C  AND CYCLES.
      PARAMETER (M=40)
      DIMENSION A(M,M), AINPUT(M), AT(M,M), AUX(M,M), BINPUT(M), C(6,3),
     1 CANON(M), EXPORT(M), FEED(M,M), RESP(M), TL(M), U(M), UT(M,M),
     2V(M), XCHNGE(M,M)
C 
C    READ IN THE DATA.
C    STANDARD SCOR INPUT FORMAT IS USED IN THIS VERSION.
      MQ=M
C 
C             READ IN THE TITLE BANNER.
C 
  100 READ (5,110,END=1470,ERR=1480) (TL(I),I=1,20),NX
  110 FORMAT (19A4,A2,I2)
C             IF A STEADY-STATE NETWORK IS EXPECTED IN ADVANCE, READ IN
C             NX=-LOG(LEAST SIGNIFICANT DIGIT),E.G.,IF SMALLEST FLOW
C             IN THE NETWORK IS .002, THEN PUT A 3 IN COLUMN 80.
      EPS=1.0E-06
      IF (NX.NE.0) EPS=10.**(1-NX)
      WRITE (6,120) (TL(I),I=1,20)
  120 FORMAT (//,1X,19A4,A2,/)
C             N IS THE NUMBER OF COMPARTMENTS IN THIS RUN.
C             NL IS THE NUMBER OF LIVING, FEEDING COMPARTMENTS. ALL LIVI
C             COMPARTMENTS SHOULD APPEAR FIRST IN THE LIST OF SPECIES, A
C             ALL NON-LIVING SPECIES SHOULD BE GROUPED AT THE END OF THE
      READ (5,130,END=1470,ERR=1500) N,NL
  130 FORMAT (2I3)
      NLP1=NL+1
      WRITE (6,140) N
  140 FORMAT (1X,'NUMBER OF COMPARTMENTS IS ',I4)
      IF (N.GT.M) GO TO 1500
C             IF NO INPUT IS PROVIDED TO NL, ALL COMPARTMENTS ARE ASSUME
      IF (NL.LE.0) NL=N
      IF (NL.GE.N) GO TO 160
      WRITE (6,150) NL
  150 FORMAT (1X,'NUMBER OF LIVING COMPARTMENTS IS',I4)
C             READ IN THE NAME OF EACH COMPARTMENT.
  160 WRITE (6,170)
  170 FORMAT (/,1X,'LIVING COMPARTMENTS',/)
      DO 190 I=1,NL
          READ (5,180) (TL(J),J=1,7)
  180     FORMAT (6A4,A1)
  190     WRITE (6,200) I,(TL(J),J=1,7)
  200 FORMAT (1X,I2,2X,6A4,A1)
      IF (NL.GE.N) GO TO 230
      WRITE (6,210)
  210 FORMAT (/,1X,'NON-LIVING COMPARTMENTS',/)
      DO 220 I=NLP1,N
          READ (5,180) (TL(J),J=1,7)
  220     WRITE (6,200) I,(TL(J),J=1,7)
C 
C             INITIALIZE INPUT ARRAYS.
C 
  230 NP1=N+1
      DO 240 I=1,N
          AINPUT(I)=0.
          EXPORT(I)=0.
          RESP(I)=0.
          DO 240 J=1,N
  240     XCHNGE(I,J)=0.
C 
C             READ PAST THE BIOMASSES. THEY ARE NOT USED IN THIS PACKAGE
C 
      DO 260 I=1,NP1
          READ (5,250) ICOL,VALUE
  250     FORMAT (I3,E14.7)
          IF (ICOL.LE.0) GO TO 270
  260 CONTINUE
C             AINPUT STORES THE INPUTS FROM OUTSIDE THE SYSTEM.
  270 DO 280 I=1,NP1
          READ (5,250) ICOL,VALUE
          IF (ICOL.LE.0) GO TO 290
          AINPUT(ICOL)=VALUE
  280 CONTINUE
  290 WRITE (6,300)
  300 FORMAT (/,1X,'INPUT VECTOR')
      CALL VECPRT (AINPUT,N,M)
      DO 310 I=1,N
  310     IF (AINPUT(I).LT.0.) GO TO 1520
C             EXPORT STORES NON-RESPIRATIONAL LOSSES FROM THE SYSTEM.
      DO 320 I=1,NP1
          READ (5,250) ICOL,VALUE
          IF (ICOL.LE.0) GO TO 330
          EXPORT(ICOL)=VALUE
  320 CONTINUE
  330 WRITE (6,340)
  340 FORMAT (1X,'EXPORT VECTOR')
      CALL VECPRT (EXPORT,N,M)
      DO 350 I=1,N
  350     IF (EXPORT(I).LT.0.) GO TO 1540
C             RESP STORES THE MEASURED RESPIRATIONS.
      DO 360 I=1,NP1
          READ (5,250) ICOL,VALUE
          IF (ICOL.LE.0) GO TO 370
          RESP(ICOL)=VALUE
  360 CONTINUE
  370 DO 380 I=1,N
  380     IF (RESP(I).LT.0.) GO TO 1580
      WRITE (6,390)
  390 FORMAT (1X,'RESPIRATION VECTOR')
      CALL VECPRT (RESP,N,M)
C             XCHNGE IS THE MATRIX OF INTERNAL EXCHANGES AMONG THE
C             COMPARTMENTS. ALL ENTRIES ARE POSITIVE OR ZERO. A
C             POSITIVE ENTRY IN ROW I AND COLUMN J DESIGNATES A
C             TRANSFER FROM COMPARTMENT I TO COMPARTMENT J.
      DO 410 I=1,NP1
          DO 410 J=1,NP1
          READ (5,400) IROW,ICOL,VALUE
  400     FORMAT (I3,I3,E14.7)
          IF (IROW.LE.0) GO TO 420
          XCHNGE(IROW,ICOL)=VALUE
  410 CONTINUE
  420 WRITE (6,430)
  430 FORMAT (1X,'EXCHANGE MATRIX')
      CALL MATPRT (XCHNGE,N,M)
      DO 440 I=1,N
          DO 440 J=1,N
  440     IF (XCHNGE(I,J).LT.0.) GO TO 1560
C 
C             CALCULATE THE INPUT AND OUTPUT THROUGHPUTS AS WELL AS
C             THE DIFFERENCES BETWEEN THEM.
C 
      DSUM=0.
      DO 460 I=1,N
          BINPUT(I)=AINPUT(I)
          U(I)=EXPORT(I)+RESP(I)
          DO 450 J=1,N
              BINPUT(I)=BINPUT(I)+XCHNGE(J,I)
  450         U(I)=U(I)+XCHNGE(I,J)
          V(I)=BINPUT(I)-U(I)
          IF (ABS(V(I)).LT.EPS) V(I)=0.
          DSUM=DSUM+ABS(V(I))
  460 CONTINUE
      IF (DSUM.LE.0.) GO TO 520
      WRITE (6,470)
  470 FORMAT (/,1X,'WARNING! - NETWORK IS NON STEADY-STATE!',/)
      WRITE (6,480)
  480 FORMAT (1X,'COMPARISON OF THROUGHPUTS')
      WRITE (6,490)
  490 FORMAT (/,6X,'INPUTS',6X,'OUTPUTS',4X,'IMBALANCE',/)
      DO 500 I=1,N
  500     WRITE (6,510) I,BINPUT(I),U(I),V(I)
  510 FORMAT (2X,I2,2X,E8.3,4X,E8.3,4X,E9.3)
      GO TO 540
  520 WRITE (6,530)
  530 FORMAT (1X,'COMPARTMENTAL THROUGHPUTS')
      CALL VECPRT (BINPUT,N,M)
  540 DO 550 I=1,N
  550     IF ((0.5*(BINPUT(I)+U(I))).LE.0.) GO TO 1600
C             RESET BINPUT AND U TO ZERO.
      DO 560 I=1,N
          V(I)=0.
          U(I)=0.
  560     BINPUT(I)=0.
C 
C             CALCULATE INFORMATION VARIABLES AT THIS POINT. ALTHOUGH
C             THEY WILL NOT BE PRINTED UNTIL LATER, SEVERAL OF
C             THE INTERMEDIATE VARIABLES WILL BE OF IMMEDIATE USE.
C 
      CALL ASCEND (XCHNGE,AINPUT,EXPORT,RESP,N,NL,M,AUX,FEED,BINPUT,U,
     1CANON,TST,C)
C 
C             BEGIN I/O STRUCTURE ANALYSIS.
C 
      DO 570 I=1,N
          A(I,I)=1.-FEED(I,I)
          DO 570 J=1,N
          IF (I.EQ.J) GO TO 570
          A(I,J)=-FEED(I,J)
  570 CONTINUE
      CALL INV (A,A,V,N,M)
      WRITE (6,580)
  580 FORMAT (//,27X,'*** STRUCTURE ANALYSES ***',/)
      DO 600 I=1,N
          DO 600 J=1,N
          IF (I.EQ.J) GO TO 590
          UT(I,J)=(A(I,J)/A(J,J))*BINPUT(J)/BINPUT(I)
          GO TO 600
  590     UT(I,J)=((A(J,J)-1.)/A(J,J))*BINPUT(J)/BINPUT(I)
  600 CONTINUE
      WRITE (6,610)
  610 FORMAT (1X,'TOTAL CONTRIBUTION COEFFICIENTS',/)
      CALL MATPRT (UT,N,M)
      DO 620 I=1,N
          A(I,I)=1.-AUX(I,I)
          DO 620 J=1,N
          IF (I.EQ.J) GO TO 620
          A(I,J)=-AUX(I,J)
  620 CONTINUE
      CALL INV (A,A,V,N,M)
      DO 640 I=1,N
          DO 640 J=1,N
          IF (I.EQ.J) GO TO 630
          UT(I,J)=(A(I,J)/A(I,I))*BINPUT(I)/BINPUT(J)
          GO TO 640
  630     UT(I,J)=((A(J,J)-1.)/A(J,J))*BINPUT(I)/BINPUT(J)
  640 CONTINUE
      WRITE (6,650)
  650 FORMAT (1X,'TOTAL DEPENDENCY COEFFICIENTS',/)
      CALL MATPRT (UT,N,M)
C 
C             DECOMPOSE THE NETWORK INTO INPUT ENVIRONS.
C 
      CALL XPOSE (A,A,N,M)
      DO 740 IP=1,N
          IF (AINPUT(IP).LE.0.) GO TO 740
          WRITE (6,660) IP
  660     FORMAT (/,1X,'ANALYSIS OF INPUT ',I2,/)
          DO 670 I=1,N
  670         U(I)=0.
          U(IP)=AINPUT(IP)
          CALL MATVEC (CANON,A,U,N,M)
          DO 680 I=1,N
              DO 680 J=1,N
  680         UT(I,J)=AUX(I,J)*CANON(I)
          WRITE (6,300)
          CALL VECPRT (U,N,M)
          DO 700 I=1,N
              IF (BINPUT(I).GT.0.) GO TO 690
              U(I)=0.
              GO TO 700
  690         U(I)=CANON(I)*(EXPORT(I)/BINPUT(I))
  700     CONTINUE
          WRITE (6,340)
          CALL VECPRT (U,N,M)
          DO 720 I=1,N
              IF (BINPUT(I).GT.0.) GO TO 710
              U(I)=0.
              GO TO 720
  710         U(I)=CANON(I)*(RESP(I)/BINPUT(I))
  720     CONTINUE
          WRITE (6,730)
  730     FORMAT (1X,'RESPIRATIONS')
          CALL VECPRT (U,N,M)
          WRITE (6,430)
          CALL MATPRT (UT,N,M)
  740 CONTINUE
C 
C   STORE ORIGINAL THROUGHPUTS IN MATRIX V FOR USE IN CYCLES.
      DO 750 I=1,N
  750     V(I)=BINPUT(I)
C 
C             EXTRACT ANY TROPHIC CYCLES FROM THE NETWORK.
C 
      WRITE (6,760)
  760 FORMAT (/,25X,'SEARCH FOR FEEDING CYCLES',/)
C 
C  SIGNAL THAT THIS IS SEARCH FOR FEEDING CYCLES WITH NEGATIVE NL.
C 
      NL=-NL
C 
      CALL CYCLE2 (XCHNGE,AUX,V,NL,M,TST)
C 
C  IF NO CYCLES WERE FOUND (NL NEGATIVE), PROCEED TO LINDEMAN ANALYSIS.
C 
      IF (NL.LE.0) GO TO 780
      WRITE (6,770)
  770 FORMAT (/,1X,'CYCLE-FREE FEEDING TRANSFERS',/)
      CALL MATPRT (XCHNGE,NL,M)
C 
C             CREATE LINDEMAN TROPHIC CHAIN.
C 
C  FIRST, SEARCH FOR ANY IN-MIGRATION OF HETEROTROPHS
C  AND COUNT THE NUMBER OF OBLIGATE PRIMARY PRODUCERS.
C 
  780 IF (NL.LE.0) NL=-NL
      NMIG=0
      NPRM=0
      DO 790 I=1,N
  790     CANON(I)=0.
C  A COMPARTMENT IS AN OBLIGATE PRODUCER IFF IT RECEIVES SUSTENANCE
C   FROM NO OTHER COMPARTMENT.
      DO 810 NP=1,NL
          IF (AINPUT(NP).LE.0.) GO TO 810
          DO 800 I=1,N
C  OTHERWISE, THE INPUT REPRESENTS IN-MIGRATION.
              IF (XCHNGE(I,NP).LE.0.) GO TO 800
              NMIG=NMIG+1
C 
C  RECORD THE MIGRATORY INPUT TEMPORARILY IN CANON FOR USE BELOW.
C 
              CANON(NP)=AINPUT(NP)
              GO TO 810
  800     CONTINUE
          NPRM=NPRM+1
  810 CONTINUE
C 
C  WARN USER IF NO OBLIGATE PRODUCERS ARE FOUND.
C  ERASE RESULTS OF SEARCH FOR MIGRATIONS.
C 
      IF (NPRM.GT.0) GO TO 840
      WRITE (6,820)
  820 FORMAT (/,1X,'WARNING!! NO UNAMBIGUOUS PRIMARY PRODUCERS FOUND.',/
     1,1X,'THEREFORE, ALL INPUTS ARE ASSUMED TO BE PRIMARY PRODUCTION.'/
     2)
      NMIG=0
      DO 830 I=1,N
  830     CANON(I)=0.
C 
  840 WRITE (6,850)
  850 FORMAT (//,20X,'*** LINDEMAN TROPHIC AGGREGATIONS ***',/)
C 
C  REPORT ANY MIGRATORY FLOWS THAT MIGHT HAVE BEEN FOUND.
C 
      IF (NMIG.LE.0) GO TO 900
      WRITE (6,860)
  860 FORMAT (1X,'THE FOLLOWING INPUTS ARE SUSPECTED TO BE MIGRATORY INP
     1UTS.',/,1X,'THEY WILL BE TREATED AS NON-PRIMARY INFLOWS.',/)
C 
      DO 870 I=1,NL
  870     IF (CANON(I).GT.0.) WRITE (6,880) I,CANON(I)
  880 FORMAT (3X,'MIGRATORY INPUT TO ',I3,' = ',E11.5)
      WRITE (6,890)
  890 FORMAT (/)
C 
C 
C  RECREATE MATRIX OF FEEDING COEFFICIENTS (WITHOUT MIGRATORY INPUTS.)
C  STORE THROUGHPUTS IN VECTOR TL.
C 
  900 DO 930 I=1,N
          TL(I)=0.
          DO 910 J=1,N
  910         TL(I)=TL(I)+XCHNGE(J,I)
          TL(I)=TL(I)+AINPUT(I)-CANON(I)
          IF (TL(I).LE.0.) TL(I)=1.
          DO 920 J=1,N
  920         FEED(J,I)=XCHNGE(J,I)/TL(I)
          BINPUT(I)=(AINPUT(I)-CANON(I))/TL(I)
  930 CONTINUE
C             CREATE THE LINDEMAN TRANSFORMATION MATRIX.
      DO 940 I=1,N
C  (REZERO CANON.)
          CANON(I)=0.
          DO 940 J=1,N
  940     A(I,J)=0.
      DO 950 I=1,NL
  950     A(1,I)=BINPUT(I)
      DO 990 K=2,NL
          KM1=K-1
          DO 980 L=1,NL
              IF ((K.GT.2).OR.(NL.GE.N)) GO TO 970
              DO 960 K2=NLP1,N
  960             A(K,L)=A(K,L)+FEED(K2,L)
  970         DO 980 J=1,NL
  980         A(K,L)=A(K,L)+A(KM1,J)*FEED(J,L)
  990 CONTINUE
      IF (NL.GE.N) GO TO 1010
      DO 1000 I=NLP1,N
 1000     A(N,I)=1.
 1010 WRITE (6,1020)
 1020 FORMAT (1X,'LINDEMAN TRANSFORMATION MATRIX')
      CALL MATPRT (A,NL,M)
C             CALCULATE AVERAGE TROPHIC LEVEL FOR EACH SPECIES.
      DO 1030 J=1,NL
          U(J)=0.
          DO 1030 I=1,NL
          WI=I
 1030     U(J)=U(J)+WI*A(I,J)
      IF (NL.GE.N) GO TO 1050
      DO 1040 I=NLP1,N
 1040     U(I)=1.
 1050 WRITE (6,1060) 
 1060 FORMAT (1X,'EFFECTIVE TROPHIC LEVELS OF EACH SPECIES')
      CALL VECPRT (U,N,M)
C             AGGREGATE EXPORTS AND RESPIRATIONS.
      CALL MATX (UT,A,XCHNGE,N,M)
      CALL XPOSE (A,A,N,M)
      CALL MATX (AT,UT,A,N,M)
      CALL XPOSE (A,A,N,M)
C 
      CALL MATVEC (U,A,AINPUT,N,M)
      IF (NMIG.LE.0) GO TO 1080
C  IF NMIG>0, REPORT DISTRIBUTION OF INPUTS
      WRITE (6,1070)
 1070 FORMAT (/,1X,'CANONICAL DISTRIBUTION OF INPUTS')
      CALL VECPRT (U,N,M)
C 
C  CREATE THE FIRST TERM IN GRAZING CHAIN
 1080 CANON(1)=0.
      DO 1090 I=1,N
 1090     CANON(1)=CANON(1)+A(1,I)*TL(I)
C 
      DINP=0.
      IF (NL.GE.N) GO TO 1110
      DO 1100 I=NLP1,N
 1100     DINP=DINP+U(I)
 1110 CALL MATVEC (U,A,EXPORT,N,M)
      WRITE (6,1120)
 1120 FORMAT (1X,'CANONICAL EXPORTS')
      CALL VECPRT (U,N,M)
      CALL MATVEC (U,A,RESP,N,M)
      WRITE (6,1130)
 1130 FORMAT (1X,'CANONICAL RESPIRATIONS')
      CALL VECPRT (U,N,M)
C             ADD UP CANONICAL TRANSFERS.
      NM1=NL-1
      DO 1140 I=1,NM1
          IP1=I+1
          DO 1140 J=1,NL
 1140     CANON(IP1)=CANON(IP1)+AT(I,J)
      WRITE (6,1150)
 1150 FORMAT (1X,'THE GRAZING CHAIN')
      CALL VECPRT (CANON,NL,M)
      PN2=0.
      IF (NL.GE.N) GO TO 1230
      DO 1160 I=1,NL
          PN2=PN2+AT(N,I)
 1160     U(I)=AT(I,N)
      WRITE (6,1170)
 1170 FORMAT (1X,'RETURNS TO DETRITAL POOL')
      CALL VECPRT (U,NL,M)
      WRITE (6,1180) PN2
 1180 FORMAT (1X,'DETRITIVORY = ',E12.5,/)
      WRITE (6,1190) DINP
 1190 FORMAT (1X,'INPUT TO DETRITAL POOL = ',E12.5,/)
      WRITE (6,1200) AT(N,N)
 1200 FORMAT (1X,'CIRCULATION WITHIN DETRITAL POOL = ',E12.5,/)
C             MERGE THE DETRITAL POOL WITH TROPHIC LEVEL 1 TO CALCULATE
C             THE LINDEMAN SPINE.
      CANON(1)=CANON(1)+DINP
      CANON(2)=CANON(2)+PN2
      DO 1210 I=2,NL
 1210     CANON(1)=CANON(1)+U(I)
      WRITE (6,1220)
 1220 FORMAT (1X,'LINDEMAN SPINE')
      CALL VECPRT (CANON,NL,M)
 1230 DO 1240 I=1,NL
          IP1=I+1
          IF (CANON(I).LE.0.) GO TO 1250
 1240     CANON(I)=CANON(IP1)/CANON(I)
 1250 WRITE (6,1260)
 1260 FORMAT (1X,'TROPHIC EFFICIENCIES')
      IPM1=IP1-1
      CALL VECPRT (CANON,IPM1,M)
C 
C             PRINT THE STORED INFORMATION INDICES.
C 
      WRITE (6,1270)
 1270 FORMAT (//,26X,'*** INFORMATION INDICIES ***',/)
      WRITE (6,1280) TST
 1280 FORMAT (2X,'TOTAL SYSTEM THROUGHPUT = ',E11.5,//)
      WRITE (6,1290) C(5,3)
 1290 FORMAT (2X,'DEVELOPMENT CAPACITY = ',E11.5,/)
      TEMP=C(5,1)/C(5,3)
      WRITE (6,1300) C(5,1),TEMP
 1300 FORMAT (2X,'ASCENDENCY = ',E11.5,5X,'(',F4.3,')',/)
      TEMP=C(1,2)/C(5,3)
      WRITE (6,1310) C(1,2),TEMP
 1310 FORMAT (2X,'OVERHEAD ON IMPORTS = ',E11.5,5X,'(',F4.3,')',/)
      TEMP=C(3,2)/C(5,3)
      WRITE (6,1320) C(3,2),TEMP
 1320 FORMAT (2X,'OVERHEAD ON EXPORTS = ',E11.5,5X,'(',F4.3,')',/)
      TEMP=C(4,2)/C(5,3)
      WRITE (6,1330) C(4,2),TEMP
 1330 FORMAT (2X,'DISSIPATIVE OVERHEAD = ',E11.5,5X,'(',F4.3,')',/)
      TEMP=C(2,2)/C(5,3)
      WRITE (6,1340) C(2,2),TEMP
 1340 FORMAT (2X,'REDUNDANCY =',E11.5,5X,'(',F4.3,')',//)
      WRITE (6,1350) C(2,3)
 1350 FORMAT (2X,'INTERNAL CAPACITY =',E11.5,/)
      TEMP=C(2,1)/C(2,3)
      WRITE (6,1360) C(2,1),TEMP
 1360 FORMAT (2X,'INTERNAL ASCENDENCY =',E11.5,5X,'(',F4.3,')',/)
      TEMP=C(2,2)/C(2,3)
      WRITE (6,1370) C(2,2),TEMP
 1370 FORMAT (2X,'REDUNDANCY = ',E11.5,5X,'(',F4.3,')',//)
C 
C             PRINT THE INTERCOMPARTMENTAL CONNECTANCES.
C 
      WRITE (6,1380)
 1380 FORMAT (2X,25X,'*** CONNECTANCE INDICES ***',/)
      TEMP=2.**(C(6,1)/2.)
      WRITE (6,1390) TEMP
 1390 FORMAT (2X,'OVERALL CONNECTANCE = ',F7.3,/)
      TEMP=2.**(C(6,2)/2.)
      WRITE (6,1400) TEMP
 1400 FORMAT (2X,'INTERCOMPERTMENTAL CONNECTANCE = ',F7.3,/)
      TEMP=2.**(C(6,3)/2.)
      WRITE (6,1410) TEMP
 1410 FORMAT (2X,'FOODWEB CONNECTANCE = ',F7.3,///)
C 
C             REMOVE ALL THE CYCLES FROM THE NETWORK.
C 
      WRITE (6,1420)
 1420 FORMAT (//,25X,'*** FULL CYCLE ANALYSIS ***',/)
      CALL CYCLE2 (XCHNGE,AUX,V,N,M,TST)
      IF (N.LT.0) GO TO 100
C 
C  RECONSTITUTE ORIGINAL FLOWS.
C 
      DO 1430 I=1,N
          DO 1430 J=1,N
 1430     UT(I,J)=AUX(I,J)*V(I)
      WRITE (6,1440)
 1440 FORMAT (/,1X,'RESIDUAL FLOWS')
      CALL MATPRT (XCHNGE,N,M)
      DO 1450 I=1,N
          DO 1450 J=1,N
 1450     UT(I,J)=UT(I,J)-XCHNGE(I,J)
      WRITE (6,1460)
 1460 FORMAT (1X,'AGGREGATED CYCLES')
      CALL MATPRT (UT,N,M)
C 
C             RETURN TO EXECUTE NEXT DATA SET.
      GO TO 100
 1470 STOP
C 
C             ERROR DIAGNOSTICS FOLLOW:
C 
 1480 WRITE (6,1490)
 1490 FORMAT ('0 ERROR IN TITLE')
      STOP
 1500 WRITE (6,1510) MQ
 1510 FORMAT ('0 ERROR NUMBER OF COMPARTMENTS MAX=',I3)
      STOP
 1520 WRITE (6,1530)
 1530 FORMAT ('0 ERROR INPUT VECTOR CANNOT BE LESS THAN 0')
      STOP
 1540 WRITE (6,1550)
 1550 FORMAT ('0 ERROR EXPORT VECTOR CAN NOT HAVE VALUES LESS THAN 0')
      STOP
 1560 WRITE (6,1570)
 1570 FORMAT ('0 ERROR EXCHANGE MATRIX CAN NOT HAVE VALUES LESS THAN 0')
      STOP
 1580 WRITE (6,1590)
 1590 FORMAT ('0 ERROR RESPIRATIONS CANNOT BE LESS THAN 0.')
      STOP
 1600 WRITE (6,1610)
 1610 FORMAT ('0 ERROR COMPARTMENTAL THROUGHPUTS MUST BE GREATER THAN 0'
     1)
      STOP
      END
C  THIS SUBROUTINE COMPUTES THE MUTUAL INFORMATION VARIABLES
C  ASSOCIATED WITH A GIVEN FLOW NETWORK. THE NETWORK NEED NOT
C  BE AT STEADY-STATE,BUT THE RESPIRATIONS MUST BE INDEPENDENTLY
C  KNOWN. ALL INPUT FLOWS MUST BE POSITIVE.
C 
      SUBROUTINE ASCEND (P,IM,EX,RP,N,NL,M,F,G,Q,FE,GE,TST,C)
C 
C    P - AN MXM INPUT MATRIX OF INTERCOMPARTMENTAL FLOWS
C 
C    IM - AN M DIMENSIONAL INPUT VECTOR OF INPUT FLOWS (REAL)
C 
C    EX - AN M DIMENSIONAL INPUT VECTOR OF USEABLE EXPORTS
C 
C    RP - AN M DIMENSIONAL VECTOR OF COMPARTMENTAL RESPIRATIONS
C 
C    N - THE NUMBER OF COMPARTMENTS IN THE SYSTEM
C 
C    M - THE DIMENSION OF THE ARRAYS IN THE CALLING PROGRAM (M>OR=N+3)
C 
C    F - AN MXM UTILITY MATRIX (STORES THE FIJ'S)
C 
C    G - AN MXM UTILITY MATRIX (STORES THE GIJ'S)
C 
C    Q - AN M-DIM UTILITY VECTOR (STORES THE THROUGHPUT PROBABILITIES)
C 
C    FE - AN M-DIM UTILITY VECTOR (STORES THE EXPORT COEFFICIENTS)
C 
C    GE - AN M-DIM UTILITY VECTOR (STORES THE IMPORT COEFFICIENTS)
C 
C    TST - THE COMPUTED TOTAL SYSTEM THROUGHPUT (REAL OUTPUT VARIABLE)
C 
C    C - A 6 X 3 ARRAY OF COMPUTED INFORMATION INDICIES ( " )
C 
C  IF M>40 , THE FOLLOWING STATEMENT MUST BE ALTERED:
      PARAMETER (MQ=40)
      DIMENSION C(6,3), EX(M), F(M,M), FE(M), G(M,M), GE(M), P(M,M),
     1Q(M), QP(MQ), RP(M)
      REAL IM(M)
C 
      DATA CONV/1.442695/
C 
      N1=N+1
      N2=N+2
      N3=N+3
      NLP1=NL+1
      DO 100 I=N1,N3
          DO 100 J=1,N3
  100     P(I,J)=0.
      DO 110 I=1,N
          DO 110 J=N1,N3
  110     P(I,J)=0.
C 
C             EXPAND P MATRIX TO INCLUDE EXPORTS & IMPORTS.
C 
      DO 120 I=1,N
          P(I,N2)=EX(I)
          P(I,N3)=RP(I)
  120     P(N1,I)=IM(I)
C 
C             CALCULATE Q AND QP BY STAGES. AT THE END OF EACH STAGE,
C             DETERMINE THE NORMALIZED OVERHEAD FOR USE IN THE CONNECTIV
C             CALCULATIONS.
C 
      TST=0.
      DO 140 I=1,NL
          Q(I)=0.
          QP(I)=0.
          DO 130 J=1,NL
              Q(I)=Q(I)+P(I,J)
  130         QP(I)=QP(I)+P(J,I)
  140     TST=TST+Q(I)
C 
      C(6,3)=0.
      DO 150 I=1,NL
          DO 150 J=1,NL
          IF (P(I,J).LE.0.) GO TO 150
          C(6,3)=C(6,3)-P(I,J)*ALOG((P(I,J)**2)/(Q(I)*QP(J)))
  150 CONTINUE
      C(6,3)=C(6,3)/TST
C 
C             NEXT, INCLUDE THE NON-LIVING COMPONENTS.
C 
      IF (NLP1.GT.N) GO TO 190
      TST=0.
      DO 170 I=1,N
          Q(I)=0.
          QP(I)=0.
          DO 160 J=1,N
              Q(I)=Q(I)+P(I,J)
  160         QP(I)=QP(I)+P(J,I)
  170     TST=TST+Q(I)
C 
      C(6,2)=0.
      DO 180 I=1,N
          DO 180 J=1,N
          IF (P(I,J).LE.0.) GO TO 180
          C(6,2)=C(6,2)-P(I,J)*ALOG((P(I,J)**2)/(Q(I)*QP(J)))
  180 CONTINUE
      C(6,2)=C(6,2)/TST
      GO TO 200
C 
  190 C(6,2)=C(6,3)
C 
C             FINALLY, INCLUDE THE EXOGENOUS TRANSFERS.
C 
  200 TST=0.
      C(6,1)=0.
      DO 220 I=1,N3
          Q(I)=0.
          QP(I)=0.
          DO 210 J=1,N3
              Q(I)=Q(I)+P(I,J)
  210         QP(I)=QP(I)+P(J,I)
  220     TST=TST+Q(I)
C 
C             CALCULATE INFORMATION COMPONENTS.
C 
C             ZERO THE INFORMATION ARRAY.
C 
      DO 230 I=1,5
          DO 230 J=1,3
  230     C(I,J)=0.
C 
C             CALCULATE THE COMPONENTS OF THE DEVELOPMENT CAPACITY.
C 
      DO 280 I=1,N
          IF (P(N1,I).LE.0.) GO TO 240
          C(1,1)=C(1,1)+P(N1,I)*ALOG((P(N1,I)*TST)/(Q(N1)*QP(I)))
          C(1,2)=C(1,2)-P(N1,I)*ALOG((P(N1,I)**2)/(Q(N1)*QP(I)))
          C(1,3)=C(1,3)-P(N1,I)*ALOG(P(N1,I)/TST)
          C(6,1)=C(6,1)-2.*P(N1,I)*ALOG(P(N1,I)/QP(I))
C 
  240     IF (P(I,N2).LE.0.) GO TO 250
          C(3,1)=C(3,1)+P(I,N2)*ALOG((P(I,N2)*TST)/(Q(I)*QP(N2)))
          C(3,2)=C(3,2)-P(I,N2)*ALOG((P(I,N2)**2)/(Q(I)*QP(N2)))
          C(3,3)=C(3,3)-P(I,N2)*ALOG(P(I,N2)/TST)
          C(6,1)=C(6,1)-2.*P(I,N2)*ALOG(P(I,N2)/Q(I))
C 
  250     IF (P(I,N3).LE.0.) GO TO 260
          C(4,1)=C(4,1)+P(I,N3)*ALOG((P(I,N3)*TST)/(Q(I)*QP(N3)))
          C(4,2)=C(4,2)-P(I,N3)*ALOG((P(I,N3)**2)/(Q(I)*QP(N3)))
          C(4,3)=C(4,3)-P(I,N3)*ALOG(P(I,N3)/TST)
          C(6,1)=C(6,1)-2.*P(I,N3)*ALOG(P(I,N3)/Q(I))
C 
  260     DO 270 J=1,N
              IF (P(I,J).LE.0.) GO TO 270
              C(2,1)=C(2,1)+P(I,J)*ALOG((P(I,J)*TST)/(Q(I)*QP(J)))
              C(2,2)=C(2,2)-P(I,J)*ALOG((P(I,J)**2)/(Q(I)*QP(J)))
              C(2,3)=C(2,3)-P(I,J)*ALOG(P(I,J)/TST)
              C(6,1)=C(6,1)-P(I,J)*ALOG((P(I,J)**2)/(Q(I)*QP(J)))
  270     CONTINUE
  280 CONTINUE
      DO 290 I=1,4
          DO 290 J=1,3
  290     C(5,J)=C(5,J)+C(I,J)
      C(6,1)=C(6,1)/TST
C 
C             CONVERT ALL INDICES FROM NATS TO BITS.
C 
      DO 300 I=1,6
          DO 300 J=1,3
  300     C(I,J)=CONV*C(I,J)
C 
C             CREATE F,G,FE,GE
C 
      DO 310 I=1,N
  310     Q(I)=AMAX1(Q(I),QP(I))
      DO 350 I=1,N
          IF (Q(I).LE.0.) GO TO 320
          GE(I)=P(N1,I)/Q(I)
  320     IF (Q(I).LE.0.) GO TO 330
          FE(I)=P(I,N2)/Q(I)
  330     DO 340 J=1,N
              IF (Q(I).GT.0.) F(I,J)=P(I,J)/Q(I)
  340         IF (Q(J).GT.0.) G(I,J)=P(I,J)/Q(J)
  350 CONTINUE
C 
      RETURN
      END
C
C  THIS REVISION OF THE NETWRK BACKTRACKING ROUTINE REMOVES THE
C  CYCLES ONE NEXUS AT A TIME AND DOES NOT REQUIRE ANY PATHWAY
C  INFORMATION ABOUT OTHER NEXUSES. THAT IS, IT OBVIATES THE
C  NEED TO STORE ANY PATHWAY INFORMATION OTHER THAN THAT PERTAINING
C  TO THE ONE UNDER IMMEDIATE CONSIDERATION.
C 
C  THE SMALLEST ARC THAT ENGAGES IN CYCLING IS FOUND AND IT IS
C  TESTED TO SEE IF IT IS ALSO THE SMALLEST ARC OF A BONA-FIDE NEXUS.
C  IF SO, THE ASSOCIATED NEXUS IS REMOVED  AND THE PROCESS IS
C  ITERATED. IN NETWORKS WITH MILLIONS OR BILLIONS OF CYCLES THIS
C  STRATEGEM SAVES CONSIDERABLE COMPUTATIONAL TIME.
C 
      SUBROUTINE CYCLE2 (WEB,F,TPTS,N,MM,TST)
C 
C   WEB IS THE MATRIX OF INTERNAL FLOWS WITHIN THE N-COMPARTMENT
C   SYSTEM.
C 
C   F IS THE MATRIX THAT CONTAINS THE ORIGINAL OUTPUT PROPORTIONS.
C 
C   TPTS CONTAINS THE ORIGINAL THROUGHPUTS OF EACH COMPARTMENT.
C 
C   N IS THE NUMBER OF COMPARTMENTS IN THE PRESENT RUN.
C   (IF N IS NEGATIVE ON INITIATION, ONLY FEEDING CYCLES ARE
C   BEING CONSIDERED.)
C 
C   MM IS THE MAXIMUM DIMENSION OF THE PROBLEM AS SPECIFIED IN THE MAIN
C   ROUTINE. IT IS 3 GREATER THAN THE MAXIMUM NUMBER OF COMPARTMENTS TO
C   BE TREATED. (37 IN THIS INSTANCE.) IF MORE STORAGE IS REQUIRED,
C   CHANGE THE NEXT PARAMETER STATEMENT AND THE CORRESPONDING ONES IN
C   THE MAIN ROUTINE AND IN SUBROUTINE ASCEND.
C 
C   TST IS THE TOTAL-SYSTEM-THROUGHPUT CALCULATED IN AMAIN.
C 
      PARAMETER (MX=40)
C 
C    MX IS EQUAL TO MM, BUT MUST BE DEFINED LOCALLY.
C 
      DIMENSION WEB(MM,MM), F(MM,MM), TMP(MX,MX), CYCS(MX), MAP(MX),
     1MAP2(MX), NODE(MX), NTEMP(MX), TPTS(MM), TCYCS(MX), NFWD(MX)
C 
C   TMP ACCUMULATES THE CYCLE WEIGHTS
C   CYCS STORES THROUGHPUT IN EACH ORDER OF CYCLES.
C   TCYCS STORES THE CYCLE WEIGHTS ACCORDING TO CYCLE LENGTH.
C   MAP STORES THE ORDER IN WHICH THE NODES ARE CONSIDERED.
C   MAP2 STORES THE TEMPORARY ORDER IN WHICH NODES ARE SEARCHED
C   NODE STORES THE CURRENT SEARCH PATHWAY.
C   NTEMP AND NFWD ARE UTILITY ARRAYS.
C 
C   IF N IS NEGATIVE, THIS IS A SEARCH FOR FEEDING CYCLES.
C   MAKE IT POSITIVE AGAIN, AND NOTE THE FACT USING MARKER NFD.
      NFD=0
      IF (N.GT.0) GO TO 100
      N=-N
      NFD=1
C 
C   RECREATE THE ORIGINAL EXCHANGES.
C 
  100 DO 110 I=1,N
          DO 110 J=1,N
  110     WEB(I,J)=F(I,J)*TPTS(I)
C 
C   ZERO ALL GLOBAL VARIABLES.
C 
      NFST=0
      NEXNUM=0
      NCYC=0
      DO 120 I=1,N
  120     CYCS(I)=0.
C 
C   ZERO ALL LOCAL VARIABLES.
C 
  130 NNEX=0
      DO 140 I=1,N
          TCYCS(I)=0.
          DO 140 J=1,N
  140     TMP(I,J)=0.
C 
C  DETERMINE THE ORDER OF STARTING POINTS.  COUNT THE NUMBER OF
C  INCOMING CYCLE ARCS FOR EACH VERTEX.  ARRANGE VERTCIES BY DECREASING
C  NUMBER OF CYCLE ARCS.  ELIMINATE VERTICIES WITH NO CYCLE ARCS FROM
C  FURTHER ANALYSIS.
C 
      NM1=N-1
C             CHECK EACH VERTEX IN TURN FOR REACHABILITY.
      DO 200 II=1,N
C             SET UP STARTING VERTEX.
          DO 150 I=1,N
  150         NFWD(I)=0
          NFWD(II)=1
C             SEARCH PATHWAYS UP TO NM1 LINKS LONG.
          DO 180 K=1,NM1
C             CHECK EACH VERTEX NOT YET REACHED.
              DO 170 I=1,N
                  IF (NFWD(I).GT.0) GO TO 170
C             SEE IF ANY ARC CAN REACH THIS VERTEX.
                  DO 160 J=1,N
                      IF (NFWD(J).LT.1) GO TO 160
                      IF (WEB(J,I).LE.0.) GO TO 160
                      NFWD(I)=1
                      GO TO 170
  160             CONTINUE
  170         CONTINUE
  180     CONTINUE
C             COUNT THE NUMBER OF INCOMING CYCLE ARCS.
          NTEMP(II)=0
          DO 190 I=1,N
  190         IF ((NFWD(I).GT.0).AND.(WEB(I,II).GT.0.)) NTEMP(II)=
     1         NTEMP(II)+1
  200 CONTINUE
      NSTP=0
      DO 230 I=1,N
          NMAX=-1
          DO 210 J=1,N
              IF (NTEMP(J).LE.NMAX) GO TO 210
              NMAX=NTEMP(J)
              JMAX=J
  210     CONTINUE
          IF (NMAX.LE.0) GO TO 220
          NSTP=NSTP+1
  220     NTEMP(JMAX)=-2
          MAP(I)=JMAX
  230 CONTINUE
C 
C 
      IF (NSTP.LE.0) GO TO 600
C 
C  SEARCH FROM AMONG THE COMBINATIONS OF ELEMENTS ENGAGING IN
C  CYCLING FOR THE SMALLEST NON-ZERO ARC AMONG THEM. THIS WILL
C  ALSO BE A CANDIDATE FOR THE SMALLEST CRITICAL ARC AND THE
C  CRITICAL ARC OF THE NEXUS TO BE REMOVED BY BACKTRACKING.
C 
  240 ARCMIN=1.E+25
      DO 250 IR=1,NSTP
          DO 250 IC=1,NSTP
          IRTP=MAP(IR)
          ICTP=MAP(IC)
          IF (WEB(IRTP,ICTP).LE.0.) GO TO 250
          IF (WEB(IRTP,ICTP).GE.ARCMIN) GO TO 250
          ARCMIN=WEB(IRTP,ICTP)
          IMIN=IRTP
          IM=IR
          JMIN=ICTP
          JM=IC
  250 CONTINUE
C 
C IF WEAK ARC BELONGS TO SELF- LOOP, TREAT SEPARATELY
C 
      IF (IMIN.EQ.JMIN) GO TO 590
C 
C  MAKE SURE THAT AT LEAST ONE CYCLE CONTAINS THE CURRENT
C  SMALLEST ARC, WEB(IMIN,JMIN)
C 
C  FIND ALL NODES THAT CAN BE REACHED FROM JMIN IN THE FORWARD
C  DIRECTION.
C 
      NHALF=(N/2)+1
      DO 260 I=1,N
  260     NFWD(I)=0
      NFWD(JMIN)=1
C             SEARCH PATHWAYS UP TO NHALF LINKS LONG.
      DO 290 K=1,NHALF
C             CHECK EACH VERTEX NOT YET REACHED.
          DO 280 I=1,N
              IF (NFWD(I).GT.0) GO TO 280
C             SEE IF ANY ARC CAN REACH THIS VERTEX.
              DO 270 J=1,N
                  IF (NFWD(J).LT.1) GO TO 270
                  IF (WEB(J,I).LE.0.) GO TO 270
                  NFWD(I)=1
                  GO TO 280
  270         CONTINUE
  280     CONTINUE
  290 CONTINUE
C 
C  FIND ALL NODES THAT CAN BE REACHED FROM IMIN IN THE BACKWARD
C  DIRECTION.
C 
      DO 300 I=1,N
  300     NODE(I)=0
      NODE(IMIN)=1
C             SEARCH PATHWAYS UP TO NHALF LINKS LONG.
      DO 330 K=1,NHALF
C             CHECK EACH VERTEX NOT YET REACHED.
          DO 320 I=1,N
              IF (NODE(I).GT.0) GO TO 320
C             SEE IF ANY ARC CAN REACH THIS VERTEX.
              DO 310 J=1,N
                  IF (NODE(J).LT.1) GO TO 310
                  IF (WEB(I,J).LE.0.) GO TO 310
                  NODE(I)=1
                  GO TO 320
  310         CONTINUE
  320     CONTINUE
  330 CONTINUE
C 
C  MAP ALL THOSE NODES THAT ARE COMMON TO BOTH SEARCHES
C  THEY WILL ALL BE MEMBERS OF THE NEXUS DEFINED BY WEB(IMIN,JMIN).
C 
      NSTP2=0
      DO 340 I=1,NSTP
  340     MAP2(I)=0
      DO 350 I=1,NSTP
          IF ((NFWD(MAP(I)).LE.0).OR.(NODE(MAP(I)).LE.0)) GO TO 350
          NSTP2=NSTP2+1
          MAP2(NSTP2)=MAP(I)
  350 CONTINUE
C 
C  REORDER MAPPING SO THAT IMIN AND JMIN COME FIRST AND SECOND, RESP.
C 
      DO 360 I=1,NSTP2
  360     NFWD(I)=MAP2(I)
      MAP2(1)=IMIN
      MAP2(2)=JMIN
      IF (NSTP2.LE.2) GO TO 380
      INDX=2
      DO 370 I=1,NSTP2
          IF ((NFWD(I).EQ.IMIN).OR.(NFWD(I).EQ.JMIN)) GO TO 370
          INDX=INDX+1
          MAP2(INDX)=NFWD(I)
  370 CONTINUE
C 
C  IF NO CYCLES IN NEXUS, GO TO THE NEXT SMALLEST ARC.
C 
  380 IF (NSTP2.GT.0) GO TO 390
      WEB(IMIN,JMIN)=-WEB(IMIN,JMIN)
      GO TO 240
C 
C   BEGIN SEARCH FOR NEXUS DEFINED BY WEB(IMIN,JMIN).
C 
C  WHOLE IS USED TO CHECK THE PROBABILITY NORMALIZATION PROCESS.
C 
  390 WHOLE=0.
C 
C  START BACKTRACK ROUTINE FROM CURRENT WEAK ARC
C 
C             INITIALIZE STARTING NODE AND LEVEL.
      LEVEL=2
      NODE(1)=1
      NODE(2)=2
C             ADVANCE TO NEXT LEVELS.
  400 LM1=LEVEL
      LEVEL=LEVEL+1
      NODE(LEVEL)=1
C             CHECK FOR CONNECTION BETWEEN NODES AT PRESENT TWO LEVELS.
  410 NZ1=NODE(LM1)
      KROW=MAP2(NZ1)
      NZ2=NODE(LEVEL)
      KCOL=MAP2(NZ2)
      IF (WEB(KROW,KCOL).GT.0.) GO TO 440
C             TRY NEXT NODE IN NEXT LEVEL.
  420 NODE(LEVEL)=NODE(LEVEL)+1
      IF (NODE(LEVEL).GT.NSTP2) GO TO 430
      GO TO 410
C             BACKTRACK TO PREVIOUS LEVEL.
  430 LEVEL=LEVEL-1
      LM1=LEVEL-1
C             IF FURTHER BACKTRACKING IS IMPOSSIBLE,END SEARCH UNDER
C             PRESENT WEAK ARC.
      IF (LEVEL.LE.2) GO TO 530
      GO TO 420
C             IF THIS CONNECTION COMPLETES CYCLE, REPORT THE RESULTS.
  440 IF (NODE(LEVEL).EQ.1) GO TO 460
C             CHECK IF THIS NODE APPEARS PREVIOUSLY IN PATHWAY.
      DO 450 K=1,LM1
          IF (NODE(LEVEL).EQ.NODE(K)) GO TO 420
  450 CONTINUE
      GO TO 400
C 
C   CALCULATE THE CIRCUIT PROBABILITY FOR THIS CYCLE.
C 
  460 WEIGHT=1.
      DO 470 KK=1,LM1
          KKP1=KK+1
          KROW=NODE(KK)
          KCOL=NODE(KKP1)
          KROW=MAP2(KROW)
          KCOL=MAP2(KCOL)
  470     WEIGHT=WEIGHT*F(KROW,KCOL)
C 
C  ADD THIS WEIGHT TO THE TEMPORARY STORAGE MATRIX.
C 
      DO 480 KK=1,LM1
          KKP1=KK+1
          KROW=NODE(KK)
          KCOL=NODE(KKP1)
          KROW=MAP2(KROW)
          KCOL=MAP2(KCOL)
C  ALSO, ADD THIS AMOUNT TO THE CYCLE DISTRIBUTIONS.
          TCYCS(LM1)=TCYCS(LM1)+WEIGHT
  480     TMP(KROW,KCOL)=TMP(KROW,KCOL)+WEIGHT
C 
C             REPORT THIS CYCLE.
      NNEX=NNEX+1
      KTRY=MOD(NNEX,5000)
      IF (KTRY.EQ.0) WRITE (*,490) NNEX
  490 FORMAT (1X,I10,2X,'NEXUS CYCLES AND COUNTING.')
      NCYC=NCYC+1
      IF (NNEX.GT.50) GO TO 420
      L0=LM1+1
      DO 500 KK=1,L0
          NTMP=NODE(KK)
  500     NTEMP(KK)=MAP2(NTMP)
      WRITE (6,510) NCYC,(NTEMP(JJ),JJ=1,L0)
  510 FORMAT (1X,I8,'.',1X,20(I2,'-'))
      IF (NNEX.EQ.50) WRITE (6,520)
  520 FORMAT (6X,' . . . ')
      GO TO 420
C 
C 
  530 WKARC=F(IMIN,JMIN)*TPTS(IMIN)
      NEXNUM=NEXNUM+1
      WRITE (6,540) NEXNUM,NNEX,IMIN,JMIN,WKARC
  540 FORMAT (2X,'NEXUS ',I5,' CONSISTS OF ',I8,' CYCLES. WEAK ARC (',I3
     1,',',I3,') = ',E10.4,/)
C 
C  AFTER NEXUS HAS BEEN COMPLETED, NORMALIZE THE PROBABILITY
C  MATRIX, SUBTRACT PROPER AMOUNTS FROM WEB.
C 
      PIVOT=TMP(IMIN,JMIN)
      IF (PIVOT.LE.0.) WRITE (6,550)
  550 FORMAT (1X,'ERROR IN NORMALIZING NEXUS WEIGHTS.'/)
      DO 560 I=1,N
          DO 560 J=1,N
          IF (WEB(I,J).LE.0.) GO TO 560
          WEB(I,J)=WEB(I,J)-((TMP(I,J)/PIVOT)*ARCMIN)
  560 CONTINUE
C 
C  ADD PROPER AMTS. TO THE CYCLE DISTRIBUTIONS.
C 
      DO 570 I=1,N
  570     CYCS(I)=CYCS(I)+((TCYCS(I)/PIVOT)*ARCMIN)
C 
C  ZERO THIS WEAK ARC BEFORE PROCEEDING
C 
      WEB(IMIN,JMIN)=0.
      NFST=1
      IF (WHOLE.GT.1.00001) WRITE (6,580) WHOLE
  580 FORMAT (/,2X,'BAD SUM CHECK = ',F9.6,/)
      GO TO 130
C 
C  IF THIS NEXUS IS A SELF-LOOP, TREAT SPECIALLY.
C 
  590 NCYC=NCYC+1
      NNEX=NNEX+1
      CYCS(1)=CYCS(1)+WEB(IMIN,JMIN)
      WKARC=F(IMIN,JMIN)*TPTS(IMIN)
      WRITE (6,510) NCYC,IMIN,JMIN
      WEB(IMIN,JMIN)=0.
      NEXNUM=NEXNUM+1
      WRITE (6,540) NEXNUM,NNEX,IMIN,JMIN,WKARC
      NFST=1
      GO TO 130
C 
C             REPORT THE OVERALL RESULTS.
C 
C  FIRST, UNCOVER ANY LINKS "HIDDEN" DURING SEARCH.
  600 DO 610 I=1,N
          DO 610 J=1,N
  610     IF (WEB(I,J).LT.0.) WEB(I,J)=-WEB(I,J)
C 
      IF (NFST.EQ.0) GO TO 690
      WRITE (6,620) NCYC
  620 FORMAT (/,2X,'A TOTAL OF ',I8,1X,'CYCLES REMOVED.',/)
      IF (NFD.EQ.1) GO TO 640
      WRITE (6,630)
  630 FORMAT (//,1X,'CYCLE DISTRIBUTIONS')
      CALL VECPRT (CYCS,N,MM)
  640 CYC=0.
      DO 650 I=1,N
          CYC=CYC+CYCS(I)
  650     CYCS(I)=CYCS(I)/TST
      IF (NFD.EQ.1) GO TO 670
      WRITE (6,660)
  660 FORMAT (1X,'NORMALIZED DISTRIBUTION')
      CALL VECPRT (CYCS,N,MM)
  670 TEMP=CYC/TST
      WRITE (6,680) TEMP
  680 FORMAT (/,1X,'CYCLING INDEX IS ',E11.4,/)
C 
C             UPON RETURN WEB WILL REPRESENT THE ACYCLIC GRAPH OF
C             EXCHANGES.
C 
      GO TO 710
C 
  690 WRITE (6,700)
  700 FORMAT (/,15X,'NO CYCLES DETECTED',/)
C 
C   SEND BACK NEGATIVE N AS SIGNAL THAT NO CYCLES WERE FOUND.
C 
      N=-N
  710 RETURN
      END
C    A VERY PRIMITIVE ROUTINE TO INVERT A SQUARE MATRIX BY
C    A SEQUENCE OF ROW OPERATIONS. INVERSION IN PLACE IS
C    ALLOWED.
C 
      SUBROUTINE INV (P,A,B,N,M)
C 
C    P IS THE INVERSE UPON RETURN.
C    A IS THE INPUT MATRIX.
C    B IS AN N-DIMENSIONAL UTILITY ARRAY.
C    N IS THE DIMENSION OF THE INPUT AND OUTPUT MATRICES.
C    M IS THE MAXIMUM VALUE OF N AS DIMENSIONED IN THE CALLING
C    ROUTINE.
C 
      DIMENSION A(M,M), B(M), P(M,M)
      DO 100 I=1,N
          B(I)=0.0
          DO 100 J=1,N
          P(I,J)=A(I,J)
  100 CONTINUE
      DO 200 K=1,N
          B(K)=1.0
          IF (P(K,1)) 130,110,130
  110     WRITE (6,120) K
  120     FORMAT (//,' TROUBLE DURING MATRIX INVERSION AT ROW ',I3,//)
          GO TO 210
  130     DO 140 J=2,N
  140         P(K,J)=P(K,J)/P(K,1)
          B(K)=B(K)/P(K,1)
          DO 170 I=1,N
              IF (I-K) 150,170,150
  150         DO 160 J=2,N
  160             P(I,J)=P(I,J)-P(I,1)*P(K,J)
              B(I)=B(I)-P(I,1)*B(K)
  170     CONTINUE
          DO 190 I=1,N
              N1=N-1
              DO 180 J=1,N1
  180             P(I,J)=P(I,J+1)
              P(I,N)=B(I)
              B(I)=0.0
  190     CONTINUE
  200 CONTINUE
  210 RETURN
      END
C    A ROUTINE TO PRINT OUT SQUARE MATRICES.
C    E-FORMAT IS USED WITH THREE SIGNIFICANT DIGITS.
C 
      SUBROUTINE MATPRT (A,N,M)
C 
C    A IS THE MATRIX TO BE PRINTED.
C    N IS THE DIMENSION OF A
C    M IS THE MAXIMUM DIMENSION OF A AS SPECIFIED IN THE CALLING
C    ROUTINE.
C 
      DIMENSION A(M,M)
      WRITE (6,100)
  100 FORMAT (/)
      DO 160 NY=1,100
          NB=NY*65
          IF (NB.GT.N) NB=N
          NSY=(NY-1)*65+1
          DO 140 NX=1,100
              NN=NX*8
              IF (NN.GT.N) NN=N
              NS=(NX-1)*8+1
              WRITE (6,110) (J,J=NS,NN)
  110         FORMAT (6X,14(I6,3X))
              DO 130 I=NSY,NB
                  WRITE (6,120) I,(A(I,J),J=NS,NN)
  120             FORMAT (1X,I3,2X,14E9.3)
  130         CONTINUE
              WRITE (6,100)
              IF (N.LE.NN) GO TO 150
  140     CONTINUE
  150     IF (N.LE.NB) GO TO 170
  160 CONTINUE
  170 RETURN
      END
C    A SUBROUTINE TO MULTIPLY A VECTOR BY A SQUARE MATRIX.
C 
      SUBROUTINE MATVEC (R,S,V,N,M)
C 
C    R IS THE RESULT OF THE MULTIPLICATION.
C    S IS THE N X N MATRIX.
C    V IS THE N-DIMENSIONAL VECTOR.
C    N IS THE DIMENSION OF THE OPERATION.
C    M IS THE MAXIMUM DIMENSION OF VECTORS AS SPECIFIED IN THE CALLING
C    ROUTINE.
C 
      DIMENSION R(M), S(M,M), V(M)
C 
      DO 110 I=1,N
          R(I)=0.
          DO 100 J=1,N
  100         R(I)=R(I)+S(I,J)*V(J)
  110 CONTINUE
      RETURN
      END
C    A SUBROUTINE TO MULTIPLY TWO SQUARE MATRICIES
C 
      SUBROUTINE MATX (C,A,B,N,M)
C 
C    C IS THE PRODUCT MATRIX
C    A IS THE MULTIPLIER MATRIX
C    B IS THE MULTIPLICAND MATRIX
C    N IS THE DIMENSION OF THE MATRIX OPERATION
C    M IS THE MAXIMUM DIMENSION AS SPECIFIED IN THE CALLING ROUTINE
C 
      DIMENSION A(M,M), B(M,M), C(M,M)
      DO 120 I=1,N
          DO 110 J=1,N
              C(I,J)=0.
              DO 100 K=1,N
  100             C(I,J)=C(I,J)+A(I,K)*B(K,J)
  110     CONTINUE
  120 CONTINUE
      RETURN
      END
C    A ROUTINE FOR PRINTING OUT VECTORS
C    SEE DOCUMENTATION ON SUBROUTINE MATPRT
C 
      SUBROUTINE VECPRT (V,N,M)
C 
C    V IS THE VECTOR TO BE PRINTED
C    N IS THE DIMENSION OF THE VECTOR
C    M IS THE MAX DIMENSION FROM CALLING ROUTINE
C 
      DIMENSION V(M)
      WRITE (6,100)
  100 FORMAT (/)
      DO 130 NX=1,100
          NN=NX*8
          IF (NN.GT.N) NN=N
          NS=(NX-1)*8+1
          WRITE (6,110) (J,J=NS,NN)
  110     FORMAT (6X,14(I6,3X))
          WRITE (6,120) (V(J),J=NS,NN)
  120     FORMAT (6X,14E9.3)
          WRITE (6,100)
          IF (N.LE.NN) GO TO 140
  130 CONTINUE
  140 RETURN
      END
C    A ROUTINE TO TRANSPOSE A SQUARE MATRIX
C    THIS SUBROUTINE ALLOWS TRANSPOSITION IN PLACE.
C 
      SUBROUTINE XPOSE (T,B4,N,M)
C 
C    T IS THE TRANSPOSE OUTPUT MATRIX
C    B4 IS THE INPUT MATRIX
C    N IS THE DIMENSION OF THE MATRIX
C    M IS THE MAXIMUM DIMENSION OF B4 AS SPECIFIED IN CALLING PROGRAM
C 
      DIMENSION B4(M,M), T(M,M)
      DO 110 I=1,N
          DO 100 J=I,N
              STORE=B4(I,J)
              T(I,J)=B4(J,I)
  100         T(J,I)=STORE
  110 CONTINUE
      RETURN
      END
