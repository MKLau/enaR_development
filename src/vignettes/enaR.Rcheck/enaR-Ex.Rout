
R version 3.0.1 (2013-05-16) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "enaR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('enaR')
Loading required package: sna
sna: Tools for Social Network Analysis
Version 2.3-1 created on 2013-02-28.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
 For citation information, type citation("sna").
 Type help(package="sna") to get started.

Loading required package: network
network: Classes for Relational Data
Version 1.8.0 created on August 19, 2013.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
                    Mark S. Handcock, University of Washington
                    David R. Hunter, Penn State University
                    Martina Morris, University of Washington
 For citation information, type citation("network").
 Type help("network-package") to get started.


Attaching package: ‘network’

The following object is masked from ‘package:sna’:

    %c%

Loading required package: MASS
Loading required package: stringr
Loading required package: xlsx
Loading required package: xlsxjars
Loading required package: rJava

Attaching package: ‘enaR’

The following object is masked from ‘package:sna’:

    structure.statistics

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("TES")
> ### * TES
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TES
> ### Title: Calculate the total environ storage.
> ### Aliases: TES
> 
> ### ** Examples
> 
> data(troModels)
> TES(troModels[[6]])
$realized.input
          PLANTS         BACTERIA DETRITUS FEEDERS       CARNIVORES 
             285              117               60               17 
        DETRITUS 
             357 

$realized.output
[1] 799.23193   0.00000   0.00000   0.00000  36.76807

$unit.input
          PLANTS         BACTERIA DETRITUS FEEDERS       CARNIVORES 
      0.12061231       0.03911968       0.05421812       0.04917124 
        DETRITUS 
      0.15006305 

$unit.output
          PLANTS         BACTERIA DETRITUS FEEDERS       CARNIVORES 
      0.07146208       0.04087126       0.04121234       0.07208031 
        DETRITUS 
      0.05790248 

> 
> 
> 
> cleanEx()
> nameEx("TET")
> ### * TET
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TET
> ### Title: Calculates the total environ throughflow for a ecosystem network
> ###   model.
> ### Aliases: TET
> 
> ### ** Examples
> 
> data(troModels)
> tet <- TET(troModels[[6]])
Warning in set.orient(user.orient) :
  NOTE: output of functions from a particular analytical school will be returned in the standard orientation of that school.
> tet
$realized.input
[1]  2303.000 11880.010  6161.980   892.571  9388.439

$realized.output
[1] 29328.641     0.000     0.000     0.000  1297.359

$unit.input
[1] 1.000000 3.365442 3.396902 4.396902 2.365442

$unit.output
[1] 2.622375 1.649215 1.469720 1.922149 2.043085

> 
> 
> 
> cleanEx()
> nameEx("as.extended")
> ### * as.extended
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.extended
> ### Title: Create an extended format matrix.
> ### Aliases: as.extended
> 
> ### ** Examples
> 
> data(troModels)
> as.extended(troModels[[6]])
                 PLANTS BACTERIA DETRITUS FEEDERS CARNIVORES DETRITUS export
PLANTS                0        0                0          0     8881    300
BACTERIA              0        0               75          0     1600    255
DETRITUS FEEDERS      0        0                0        370      200      0
CARNIVORES            0        0                0          0      167      0
DETRITUS              0     5205             2309          0        0    860
                      0        0                0          0        0      0
                      0        0                0          0        0      0
import            11184        0                0          0      635      0
                 respiration  
PLANTS                  2003 0
BACTERIA                3275 0
DETRITUS FEEDERS        1814 0
CARNIVORES               203 0
DETRITUS                3109 0
                           0 0
                           0 0
import                     0 0
> 
> 
> 
> cleanEx()
> nameEx("balance")
> ### * balance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: balance
> ### Title: Balance flow network models.
> ### Aliases: balance
> 
> ### ** Examples
> 
> data(troModels)
> balance(troModels[[6]])
[1] BALANCED
 Network attributes:
  vertices = 5 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  flow:
     PLANTS     BACTERIA    DETRITUS FEEDERS   CARNIVORES     DETRITUS   
 Min.   :0   Min.   :   0   Min.   :   0.0   Min.   :  0   Min.   :   0  
 1st Qu.:0   1st Qu.:   0   1st Qu.:   0.0   1st Qu.:  0   1st Qu.: 167  
 Median :0   Median :   0   Median :   0.0   Median :  0   Median : 200  
 Mean   :0   Mean   :1041   Mean   : 476.8   Mean   : 74   Mean   :2170  
 3rd Qu.:0   3rd Qu.:   0   3rd Qu.:  75.0   3rd Qu.:  0   3rd Qu.:1600  
 Max.   :0   Max.   :5205   Max.   :2309.0   Max.   :370   Max.   :8881  
  balanced = TRUE 
  total edges= 8 
    missing edges= 0 
    non-missing edges= 8 

 Vertex attribute names: 
    export input living output respiration storage vertex.names 

 Edge attribute names: 
    flow 
> 
> 
> 
> cleanEx()
> nameEx("enaAll")
> ### * enaAll
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enaAll
> ### Title: Conduct all major ENA.
> ### Aliases: enaAll
> 
> ### ** Examples
> 
> data(troModels)
> output = enaAll(troModels[[6]])
> names(output)
[1] "ascendency" "control"    "environ"    "flow"       "mti"       
[6] "storage"    "structure"  "utility"   
> 
> 
> 
> cleanEx()
> nameEx("enaAscendency")
> ### * enaAscendency
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enaAscendency
> ### Title: Calculates the ascendency of an ecological network.
> ### Aliases: enaAscendency
> 
> ### ** Examples
> 
> data(troModels)
> enaAscendency(troModels[[6]])
          AMI      ASC       OH      CAP   ASC.CAP    OH.CAP
[1,] 1.336447 56725.49 79139.25 135864.7 0.4175144 0.5824856
> 
> 
> 
> cleanEx()
> nameEx("enaControl")
> ### * enaControl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enaControl
> ### Title: Control analyses of ecological networks.
> ### Aliases: enaControl
> 
> ### ** Examples
> 
> data(troModels)
> enaControl(troModels[[6]])
$CN
                       PLANTS  BACTERIA DETRITUS FEEDERS CARNIVORES DETRITUS
PLANTS           1.332268e-15 0.5346030        0.7868383  0.9669170        0
BACTERIA         1.428571e+00 0.0000000        0.5419789  0.9289145        0
DETRITUS FEEDERS 2.857143e-01 0.0000000        0.0000000  0.8447987        0
CARNIVORES       1.129032e+00 0.0000000        0.0000000  0.0000000        0
DETRITUS         2.333333e+00 0.5467212        0.7923887  0.9677785        0

$CQ
                     PLANTS     BACTERIA DETRITUS FEEDERS    CARNIVORES
PLANTS           1.00000000 7.704312e-18     5.089077e-16 -3.176528e-16
BACTERIA         0.07727032 1.111881e+00    -5.246418e-02  1.150296e-01
DETRITUS FEEDERS 0.03962581 4.204846e-02     9.730953e-01  5.898955e-02
CARNIVORES       0.01122731 1.191373e-02    -7.242897e-01  1.016714e+00
DETRITUS         0.23577354 3.413812e-01    -1.600830e-01  3.509878e-01
                      DETRITUS
PLANTS            3.419157e-16
BACTERIA         -8.467156e-01
DETRITUS FEEDERS -9.060661e-01
CARNIVORES       -2.567187e-01
DETRITUS          4.677140e-01

> 
> 
> 
> cleanEx()
> nameEx("enaEnviron")
> ### * enaEnviron
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enaEnviron
> ### Title: Ecological network environs.
> ### Aliases: enaEnviron
> 
> ### ** Examples
> 
> data(troModels)
> enaEnviron(troModels[[6]])
$input
$input$PLANTS
                 PLANTS BACTERIA DETRITUS FEEDERS CARNIVORES DETRITUS y
PLANTS               -1        0                0          0        0 1
BACTERIA              0        0                0          0        0 0
DETRITUS FEEDERS      0        0                0          0        0 0
CARNIVORES            0        0                0          0        0 0
DETRITUS              0        0                0          0        0 0
z                     1        0                0          0        0 0

$input$BACTERIA
                     PLANTS  BACTERIA DETRITUS FEEDERS  CARNIVORES    DETRITUS
PLANTS           -0.9332703  0.000000      0.000000000  0.00000000  0.93327028
BACTERIA          0.0000000 -1.169351      0.001213296  0.00000000  0.16813787
DETRITUS FEEDERS  0.0000000  0.000000     -0.038566625  0.01754939  0.02101723
CARNIVORES        0.0000000  0.000000      0.000000000 -0.01754939  0.01754939
DETRITUS          0.0000000  1.169351      0.037353329  0.00000000 -1.20670450
z                 0.9332703  0.000000      0.000000000  0.00000000  0.06672972
                 y
PLANTS           0
BACTERIA         1
DETRITUS FEEDERS 0
CARNIVORES       0
DETRITUS         0
z                0

$input$`DETRITUS FEEDERS`
                     PLANTS   BACTERIA DETRITUS FEEDERS  CARNIVORES    DETRITUS
PLANTS           -0.9332703  0.0000000       0.00000000  0.00000000  0.93327028
BACTERIA          0.0000000 -0.2008109       0.03267303  0.00000000  0.16813787
DETRITUS FEEDERS  0.0000000  0.0000000      -1.03856662  0.01754939  0.02101723
CARNIVORES        0.0000000  0.0000000       0.00000000 -0.01754939  0.01754939
DETRITUS          0.0000000  0.2008109       1.00589360  0.00000000 -1.20670450
z                 0.9332703  0.0000000       0.00000000  0.00000000  0.06672972
                 y
PLANTS           0
BACTERIA         0
DETRITUS FEEDERS 1
CARNIVORES       0
DETRITUS         0
z                0

$input$CARNIVORES
                     PLANTS   BACTERIA DETRITUS FEEDERS CARNIVORES    DETRITUS
PLANTS           -0.9332703  0.0000000       0.00000000   0.000000  0.93327028
BACTERIA          0.0000000 -0.2008109       0.03267303   0.000000  0.16813787
DETRITUS FEEDERS  0.0000000  0.0000000      -1.03856662   1.017549  0.02101723
CARNIVORES        0.0000000  0.0000000       0.00000000  -1.017549  0.01754939
DETRITUS          0.0000000  0.2008109       1.00589360   0.000000 -1.20670450
z                 0.9332703  0.0000000       0.00000000   0.000000  0.06672972
                 y
PLANTS           0
BACTERIA         0
DETRITUS FEEDERS 0
CARNIVORES       1
DETRITUS         0
z                0

$input$DETRITUS
                     PLANTS   BACTERIA DETRITUS FEEDERS  CARNIVORES    DETRITUS
PLANTS           -0.9332703  0.0000000      0.000000000  0.00000000  0.93327028
BACTERIA          0.0000000 -0.1693512      0.001213296  0.00000000  0.16813787
DETRITUS FEEDERS  0.0000000  0.0000000     -0.038566625  0.01754939  0.02101723
CARNIVORES        0.0000000  0.0000000      0.000000000 -0.01754939  0.01754939
DETRITUS          0.0000000  0.1693512      0.037353329  0.00000000 -1.20670450
z                 0.9332703  0.0000000      0.000000000  0.00000000  0.06672972
                 y
PLANTS           0
BACTERIA         0
DETRITUS FEEDERS 0
CARNIVORES       0
DETRITUS         1
z                0


$output
$output$PLANTS
                 PLANTS   BACTERIA DETRITUS FEEDERS  CARNIVORES    DETRITUS
PLANTS               -1  0.0000000      0.000000000  0.00000000  0.79408083
BACTERIA              0 -0.4343412      0.006258519  0.00000000  0.13351506
DETRITUS FEEDERS      0  0.0000000     -0.198937442  0.03087536  0.01668938
CARNIVORES            0  0.0000000      0.000000000 -0.03087536  0.01393563
DETRITUS              0  0.4343412      0.192678923  0.00000000 -0.95822091
z                     1  0.0000000      0.000000000  0.00000000  0.00000000
                          y
PLANTS           0.20591917
BACTERIA         0.29456761
DETRITUS FEEDERS 0.15137270
CARNIVORES       0.01693972
DETRITUS         0.33120080
z                0.00000000

$output$BACTERIA
                 PLANTS   BACTERIA DETRITUS FEEDERS  CARNIVORES     DETRITUS
PLANTS                0  0.0000000       0.00000000  0.00000000  0.000000000
BACTERIA              0 -1.1693512       0.01684944  0.00000000  0.359454730
DETRITUS FEEDERS      0  0.0000000      -0.09197564  0.01427474  0.007716077
CARNIVORES            0  0.0000000       0.00000000 -0.01427474  0.006442924
DETRITUS              0  0.1693512       0.07512620  0.00000000 -0.373613731
z                     0  1.0000000       0.00000000  0.00000000  0.000000000
                           y
PLANTS           0.000000000
BACTERIA         0.793046998
DETRITUS FEEDERS 0.069984817
CARNIVORES       0.007831818
DETRITUS         0.129136367
z                0.000000000

$output$`DETRITUS FEEDERS`
                 PLANTS    BACTERIA DETRITUS FEEDERS CARNIVORES    DETRITUS
PLANTS                0  0.00000000      0.000000000  0.0000000  0.00000000
BACTERIA              0 -0.08420272      0.001213296  0.0000000  0.02588364
DETRITUS FEEDERS      0  0.00000000     -1.038566625  0.1611869  0.08712807
CARNIVORES            0  0.00000000      0.000000000 -0.1611869  0.07275194
DETRITUS              0  0.08420272      0.037353329  0.0000000 -0.18576365
z                     0  0.00000000      1.000000000  0.0000000  0.00000000
                          y
PLANTS           0.00000000
BACTERIA         0.05710578
DETRITUS FEEDERS 0.79025162
CARNIVORES       0.08843499
DETRITUS         0.06420761
z                0.00000000

$output$CARNIVORES
                 PLANTS   BACTERIA DETRITUS FEEDERS  CARNIVORES     DETRITUS
PLANTS                0  0.0000000      0.000000000  0.00000000  0.000000000
BACTERIA              0 -0.2468772      0.003557309  0.00000000  0.075889256
DETRITUS FEEDERS      0  0.0000000     -0.113074992  0.01754939  0.009486157
CARNIVORES            0  0.0000000      0.000000000 -1.01754939  0.459272292
DETRITUS              0  0.2468772      0.109517683  0.00000000 -0.544647706
z                     0  0.0000000      0.000000000  1.00000000  0.000000000
                          y
PLANTS           0.00000000
BACTERIA         0.16743067
DETRITUS FEEDERS 0.08603944
CARNIVORES       0.55827710
DETRITUS         0.18825279
z                0.00000000

$output$DETRITUS
                 PLANTS   BACTERIA DETRITUS FEEDERS  CARNIVORES    DETRITUS
PLANTS                0  0.0000000      0.000000000  0.00000000  0.00000000
BACTERIA              0 -0.5469735      0.007881463  0.00000000  0.16813787
DETRITUS FEEDERS      0  0.0000000     -0.250525431  0.03888188  0.02101723
CARNIVORES            0  0.0000000      0.000000000 -0.03888188  0.01754939
DETRITUS              0  0.5469735      0.242643968  0.00000000 -1.20670450
z                     0  0.0000000      0.000000000  0.00000000  1.00000000
                          y
PLANTS           0.00000000
BACTERIA         0.37095418
DETRITUS FEEDERS 0.19062631
CARNIVORES       0.02133249
DETRITUS         0.41708701
z                0.00000000


> 
> 
> 
> cleanEx()
> nameEx("enaFlow")
> ### * enaFlow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enaFlow
> ### Title: Flow analyses of ecological networks.
> ### Aliases: enaFlow
> 
> ### ** Examples
> 
> data(troModels)
> F = enaFlow(troModels[[6]])  # completes the full analysis
> F$ns  # returns just the network statisics
     Boundary   TST  TSTp      APL        FCI       BFI       DFI       IFI
[1,]    11819 30626 42445 2.591251 0.09193899 0.3859139 0.3035499 0.3105362
         ID.F   ID.F.I    ID.F.O    HMG.I   HMG.O AMP.I AMP.O mode0.F  mode1.F
[1,] 1.023016 1.414552 0.9126925 2.465946 1.87498     4     0   11819 15991.28
      mode2.F  mode3.F mode4.F
[1,] 2815.723 15991.28   11819
> 
> 
> 
> cleanEx()
> nameEx("enaMTI")
> ### * enaMTI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enaMTI
> ### Title: Mixed Trophic Impacts (MTI) measures the impact of one species
> ###   on another.
> ### Aliases: enaMTI
> 
> ### ** Examples
> 
> data(troModels)
> mti <- enaMTI(troModels[[6]])
> attributes(mti)
$names
[1] "G"  "FP" "Q"  "M" 

> 
> 
> 
> cleanEx()
> nameEx("enaStorage")
> ### * enaStorage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enaStorage
> ### Title: Storage analyses of ecological networks.
> ### Aliases: enaStorage
> ### Keywords: enaFlow read.scor
> 
> ### ** Examples
> 
> data(oyster)
> S<-enaStorage(oyster)
> attributes(S)
$names
 [1] "X"  "C"  "P"  "S"  "Q"  "CP" "PP" "SP" "QP" "dt" "ns"

> 
> 
> 
> cleanEx()
> nameEx("enaStructure")
> ### * enaStructure
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enaStructure
> ### Title: Structure analyses of ecological network.
> ### Aliases: enaStructure
> 
> ### ** Examples
> 
> data(troModels)
> enaStructure(troModels[[6]])
$A
                 PLANTS BACTERIA DETRITUS FEEDERS CARNIVORES DETRITUS
PLANTS                0        0                0          0        1
BACTERIA              0        0                1          0        1
DETRITUS FEEDERS      0        0                0          1        1
CARNIVORES            0        0                0          0        1
DETRITUS              0        1                1          0        0

$ns
     n L    C  LD      ppr    lam1A mlam1A      rho         R         d no.scc
[1,] 5 8 0.32 1.6 1.839287 1.839287      1 1.839287 0.6691441 0.2392868      2
     no.scc.big pscc
[1,]          1  0.8

> 
> 
> 
> cleanEx()
> nameEx("enaUtility")
> ### * enaUtility
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enaUtility
> ### Title: Utility analysis of ecological networks.
> ### Aliases: enaUtility
> 
> ### ** Examples
> 
> data(troModels)
> U <- enaUtility(troModels[[6]],type="flow",eigen.check=FALSE)
> attributes(U)
$names
[1] "D"  "U"  "Y"  "ns"

> US <-enaUtility(troModels[[6]],type="storage",eigen.check=FALSE)
> 
> 
> 
> cleanEx()
> nameEx("environCentrality")
> ### * environCentrality
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: environCentrality
> ### Title: Calculates the environ centrality of the nodes in an ecological
> ###   network.
> ### Aliases: environCentrality
> 
> ### ** Examples
> 
> data(troModels) 
> F<-enaFlow(troModels[[6]])
> ec<-environCentrality(F$N)
> attributes(ec)
$names
[1] "ECin"  "ECout" "AEC"  

> barplot(sort(ec$AEC,decreasing=TRUE),col=4,
+    ylab="Average Environ Centrality",
+    ylim=c(0,0.4))
> 
> 
> 
> cleanEx()
> nameEx("findPathLength")
> ### * findPathLength
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findPathLength
> ### Title: Cumulative flow over a range of path lengths.
> ### Aliases: findPathLength
> 
> ### ** Examples
> 
> data(troModels)
> pl10 <- findPathLength(troModels[[6]], plot.sw=TRUE,maxPath=10)
> names(pl10)
[1] "thresholds" "tf"         "ctf"       
> pl10$thresholds
mID m50 m90 m95 
 NA   1   3   4 
> 
> 
> 
> cleanEx()
> nameEx("force.balance")
> ### * force.balance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: force.balance
> ### Title: Repeated, sequential application the balance function.
> ### Aliases: force.balance
> 
> ### ** Examples
> 
> data(troModels)
> ssCheck(troModels[[1]])
[1] TRUE
> fb.model=force.balance(troModels[[2]]) #produces a balanced model
> 
> 
> 
> cleanEx()
> nameEx("get.ns")
> ### * get.ns
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get.ns
> ### Title: Quick calculation of a range of network statistics.
> ### Aliases: get.ns
> 
> ### ** Examples
> 
> data(troModels)
> get.ns(troModels[[6]])
  n L    C  LD      ppr    lam1A mlam1A      rho         R         d no.scc
1 5 8 0.32 1.6 1.839287 1.839287      1 1.839287 0.6691441 0.2392868      2
  no.scc.big pscc Boundary   TST  TSTp      APL        FCI       BFI       DFI
1          1  0.8    11819 30626 42445 2.591251 0.09193899 0.3859139 0.3035499
        IFI     ID.F   ID.F.I    ID.F.O    HMG.I   HMG.O AMP.I AMP.O mode0.F
1 0.3105362 1.023016 1.414552 0.9126925 2.465946 1.87498     4     0   11819
   mode1.F  mode2.F  mode3.F mode4.F      AMI      ASC       OH      CAP
1 15991.28 2815.723 15991.28   11819 1.336447 56725.49 79139.25 135864.7
    ASC.CAP    OH.CAP TSS       CIS      BSI       DSI       ISI     ID.S
1 0.4175144 0.5824856 836 0.2607582 0.314168 0.2566133 0.4292187 1.672628
    ID.S.I   ID.S.O  HMG.S.O  HMG.S.I NAS NASP  mode0.S  mode1.S  mode2.S
1 2.324824 1.616178 1.321909 1.162583   1    8 262.6444 355.3617 217.9939
   mode3.S  mode4.S    lam1D synergism.F mutualism.F   lam1DS synergism.S
1 355.3617 262.6444 1.015627    3.979433       2.125 36.38074    25.33485
  mutualism.S
1    3.166667
> 
> 
> 
> cleanEx()
> nameEx("scc")
> ### * scc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scc
> ### Title: Finds the strongly connected component (SCC) in a graph.
> ### Aliases: scc
> 
> ### ** Examples
> 
> data(troModels)
> A<-enaStructure(troModels[[6]])$A
> scc(A)
$sp
    no.scc no.scc.big       pscc 
       2.0        1.0        0.8 

$membership
[1] 1 2 2 2 2

$scc.id
[1] 1

> 
> 
> 
> cleanEx()
> nameEx("set.orient")
> ### * set.orient
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set.orient
> ### Title: Globally set the output matrix orientation.
> ### Aliases: set.orient
> 
> ### ** Examples
> 
> original.orientation = get.orient()
> original.orientation
[1] "rc"
> set.orient('school')
Warning in set.orient("school") :
  NOTE: output of functions from a particular analytical school will be returned in the standard orientation of that school.
> get.orient()
[1] "school"
> set.orient('rc')
> get.orient()
[1] "rc"
> set.orient(original.orientation)
> 
> 
> 
> cleanEx()
> nameEx("ssCheck")
> ### * ssCheck
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ssCheck
> ### Title: Checks the balance of inputs and outputs from a network.
> ### Aliases: ssCheck
> 
> ### ** Examples
> 
> data(troModels)
> ssCheck(troModels[[2]])
[1] TRUE
> ssCheck(troModels[[6]])
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("unpack")
> ### * unpack
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unpack
> ### Title: "Unpacks" the components of a network object into separate
> ###   objects.
> ### Aliases: unpack
> 
> ### ** Examples
> 
> data(troModels)
> unpack(troModels[[6]])
$F
                 PLANTS BACTERIA DETRITUS FEEDERS CARNIVORES DETRITUS
PLANTS                0        0                0          0     8881
BACTERIA              0        0               75          0     1600
DETRITUS FEEDERS      0        0                0        370      200
CARNIVORES            0        0                0          0      167
DETRITUS              0     5205             2309          0        0

$z
[1] 11184     0     0     0   635

$r
[1] 2003 3275 1814  203 3109

$e
[1] 300 255   0   0 860

$y
[1] 2303 3530 1814  203 3969

$X
[1] 285 117  60  17 357

$Living
[1]  TRUE  TRUE  TRUE  TRUE FALSE

> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  10.452 0.592 11.953 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
