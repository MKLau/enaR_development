

A MATLAB! function for Network Environ Analysis

Brian D. Fatha,*, Stuart R. Borrettb,c
aBiology Department, Towson University, Towson, MD 21252, USA
bInstitute of Ecology, University of Georgia, Athens, GA 30602, USA
cSkiddaway Institute of Oceanography, 10 Ocean Science Circle, Savannah, GA 31411, USA

Received 7 June 2004; received in revised form 28 October 2004; accepted 5 November 2004

Available online 12 March 2005

Abstract

Network Environ Analysis is a formal, quantitative methodology to describe an object's within system ``environ''ment [Patten,
B.C., 1978a. Systems approach to the concept of environment. Ohio Journal of Science 78, 206-222]. It provides a perspective of the
environment, based on general system theory and input-output analysis. This approach is one type of a more general conceptual
approach called ecological network analysis. Application of Network Environ Analysis on ecosystem models has revealed several
important and unexpected results [see e.g., Patten, B.C., 1982. Environs: relativistic elementary particles or ecology. American
Naturalist 119, 179-219; Patten, B.C., 1985. Energy cycling in the ecosystem. Ecological Modelling 28, 1-71; Fath, B.D., Patten,
B.C., 1999a. Review of the foundations of network environ analysis. Ecosystems 2, 167-179], which have been identified and
summarized in the literature as network environ properties. To conduct the analysis one needs ecosystem data including the
intercompartmental flows, compartmental storages, and boundary input and output flows. The software presented herein uses these
data to perform the main network environ analyses and environ properties including unit environs, indirect e!ects ratio, network
homogenization, network synergism, network mutualism, mode partitioning, and environ control. The software is available from
The MathWorks MATLAB! Central File Exchange website (http://www.mathworks.com/matlabcentral/fileexchange/loadCategory.do)."

2004 Elsevier Ltd. All rights reserved.

Keywords: Ecological Modelling; Ecological Network Analysis; Network Environ Analysis

1. Introduction

Ecological Network Analysis (ENA) is a mathematical methodology to study within system interactions for
a given system structure (connectance pattern), function
(flow regime), and boundary input (Higashi and Burns,
1991). One could say that ENA is a formal realization of
synecology, which is mostly concerned with interrelations of material, energy and information among system
components as opposed to autecology, which focuses on
the individual organisms and populations themselves.

ENA starts with the assumption that a system can be
represented as a network of nodes (vertices, compartments, components, storages, objects, etc.) and connections between them (arcs, links, flows, etc.). In
ecological systems the connections are often based on
the flow of conservative units such as energy, matter, or
nutrients between the system compartments. If such
a flow exists, then we say there is a direct transaction
between the two connected compartments. These direct
transactions give rise to both direct and indirect
relations between all the objects in the system. Network
analysis provides a system-oriented perspective because
it is based on uncovering patterns and influences among
all the objects in a system. Therefore, it gives a view on
how components are tied to a larger web of interactions.
* Corresponding author. Fax: C1 410 704 2405.

E-mail address: bfath@towson.edu (B.D. Fath).

1364-8152/$ - see front matter " 2004 Elsevier Ltd. All rights reserved.
doi:10.1016/j.envsoft.2004.11.007

www.elsevier.com/locate/envsoft
Environmental Modelling & Software 21 (2006) 375-405

The intellectual lineage for Ecological Network
Analysis comes from economics, which developed the
ability to quantify indirect monetary flows in economic
systems. Hannon (1973) first applied economic input-
output analysis (Leontief, 1951, 1966) to investigate flow
distribution in ecosystems. His models were linked by
the energy flow through the food web and he pursued
this line of research primarily to determine interdependence of organisms in an ecosystem based on their direct
and indirect energy flows. Several formulizations of
ENA have arisen including Embodied Energy Analysis
(Herendeen, 1981, 1989), Ascendency Analysis (Ulanowicz, 1980, 1986, 1997) and Network Environ Analysis
(Patten, 1978a, 1981, 1982, 1985, in preparation).

A recent paper by Allesina and Bondavalli (2004)
presented a user friendly, Windows-based version of
Ascendency Analysis (Ulanowicz, 1982, 1986, 1997).
That paper contributes an important role to increase the
visibility and usability of that specific network methodology. In a similar vein, we hope to increase the
exposure and facilitate the use of Network Environ
Analysis by presenting a MATLAB! function (m-file) to
calculate the basic environ parameters and properties.

2. Network Environ Analysis

There has been much confusion regarding environment as a concept and how one defines it. On the most
basic level, environment is all that is external to an
object. This has led to the standard object-environment
duality where emphasis is placed on the direct flows that
come into contact with the object. This has been carried
so far as to consider all indirect flows as nonrelevant or
historical, suggesting that including them would lead to
an ``infinite regress'' (Mason and Langenheim, 1957).
Another interpretation of environment, based on an
object embedded in a system, includes the summary
contribution of the within-system flows that a!ect that
object. In other words, the environment of an object
within a specified system (and all objects are parts of
a system) can be refined to recognize the special
relationship an object has with the other objects within
the system boundary. For distinction, Patten (1978a)
termed this second, within-system environment the
object's ``environ.'' An object's environ ends at the
system boundary. Objects and connections in the external
environment, beyond the system boundary, are not
distinguished so exchanges between them are not
material to the analysis. Exchanges across the boundary of the system with the external environment are
deemed inputs or outputs. One important aspect of
environ theory is an explicit representation of the two
environs, input and output, for each object. Furthermore, it is possible to quantify the environs, and thus,
the direct and indirect e!ects between any two objects

in the system. In principle, environ analysis can be
applied to a system as simple as a pair of interconnected objects. In practice it has been most readily
applied to models of entire ecosystems.

Patten (1978a) introduced a systems theory of the
environment and put forth three foundational tenets.
First, each object has both an input environ, those flows
introduced at the system boundary leading up to the
object, and an output environ, those flows emanating
from the object back to the other system objects before
exiting at the system boundary. Second, the purpose of
a system boundary is to provide a reference state for the
system of study, without which environ analysis is
impossible because the analysis collapses back down to
the object's boundary. A system boundary is necessary
to distinguish between the system's environment (the
infinite regress) and its component objects' environs
(within system processes). The third key realization is
that the individual environs (and the flow carried in each
one) are unique such that the system comprises the set
union of all environs of each orientation (input or
output), which in turn partition the system level of
organization.

Network Environ Analysis has also been a fruitful
way of investigating system level properties of ecosystems. In particular, a series of ``network statistics'' such
as indirect e!ects ratio, homogenization, synergism, and
mutualism have grown up around this analysis that
express the role of each entity in a larger system. See
Patten (in preparation), Fath and Patten (1999a), and
Fath (2004a,b) for further details regarding these
properties and the history of Network Environ Analysis.

The purpose of this paper is to document software to
calculate input and output environs and several of the
other basic network properties. We first briefly describe
the methodology and network properties. We then
introduce the software, which is available from The
MathWorks MATLAB! Central File Exchange website
(http://www.mathworks.com/matlabcentral/fileexchange
/loadCategory.do) and reproduced in Appendix A.
Appendix B gives the program output for a well-studied
example of an oyster reef model (Dame and Patten,
1981). In Appendix C, we compile a glossary for the
Network Environ Analysis notation and in Appendix D
a glossary for common MATLAB notation.

3. Methodology
3.1. Terms and notations

The software introduced in this paper summarizes
algorithms for the well-documented methodology of
Network Environ Analysis (Patten, 1978a, 1982, 1985,
in preparation; Matis and Patten, 1981; Patten et al.,
1990; Fath and Patten, 1999a). In Network Environ

376 B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405
Analysis, systems are partitioned into compartments
and a conservative substance such as energy, nitrogen,
or phosphorus is propagated mathematically through
the interconnected network. Let i, j Z 1,., n represent n
storage compartments (nodes) within an open physical
system demarcated from its surroundings by a boundary
across which conservative energy-matter is exchanged.
The environment is traditionally indexed by 0, however,
in the MATLAB! code environment is indexed as n C 1
because the software does not allow a zero index.
Within-system connections are expressed in an adjacency matrix, A Z (aij), corresponding to the model
structure, where aij Z 1 if there is an observed flow from
compartment j to compartment i, and aij Z 0 if there is
no flow. Boundary transfers, zj0 (or just zj) Z input to j,
y0i (or yi) Z output from i, and internal exchanges
between compartments, fij Z flow directed from j to i,
comprise a set of transactive flows, or transactions,
meaning the transferred quantities are conserved. Let
the ordered pairs (i, j ), ( j, 0) and (0, i) be flow arcs, j /
i, 0 / j, and i / 0 carrying the corresponding flows fij,
zj, and yi. Networks are a synthesis of such binary flows.
Inputs (zj) or flows ( fij) retained in receiving compartments over time become storages (xi), and storage at i,
say, released as flow to j or the environment, respectively, becomes flow ( fji) and output ( yi). The sum
of flows into or out of the i-th compartment at any point
in time is throughflow, Ti(in) and Ti(out), given by:

T!in"i ZziC X

n

jZ1

fij and T!out"i Z X

n

jZ1

fjiCyi:

At steady state, compartmental inflows and outflows are
equal such that dxi/dt Z 0, and therefore, incoming and
outgoing throughflows are equal: Ti(in) Z Ti(out) h Ti.
This notation is used to develop a structural analysis,
and four functional analyses (flow, storage, utility, and
control analysis); the later two functional analyses can
be derived from either flows or storages.

3.2. Structural analysis

Structural analysis provides important insight into
the pattern and connectivity of a model. Path analysis is
one type of structural analysis in Network Environ
Analysis that enumerates pathways of various lengths
between components and the rate at which the number
of pathways increases as path length increases. The
analysis is performed on the adjacency matrix, A Z (aij),
of the model. It is a property of matrix multiplication
that Am gives the number of paths of length m between
two components, i and j in the model. In systems with
feedback (i.e., all realistic ecological models), the
number of pathways increases as m increases; therefore,

PN

mZ0 Am is a divergent series. This phenomenon istermed pathway proliferation in Network Environ

Analysis. The proliferation rate is a significant system
attribute because it describes the growth rate of indirect
pathways, ultimately describing the number of pathways
available for transactions and relations (Borrett and
Patten, 2003). Like the population growth rate in
a Leslie Matrix (Caswell, 2001), the pathway proliferation rate (aij(m C 1)/aij(m) as m / N) is given by the
largest eigenvalue of A (Fath, 1998). The software
returns the adjacency matrix, the pathway proliferation
rate, the number of network nodes (n), the proportion of
direct connections completed or the network connectance (L/n2), and the link density (L/n), where
LZ Pni; jZ1 aij.

3.3. Functional analysis

Throughflow, Storage, Utility, and Control are four
functional analyses used in Network Environ Analysis,
each providing di!erent system insight. Throughflow
analysis is similar to input-output analyses performed
by other ENAs, but storage, utility, and control analyses
are unique to Network Environ Analysis. Here, we
describe storage analysis in detail, while the others
follow as analogues.

3.3.1. Storage analysis

Nondimensional, storage-specific, output-oriented,
intercompartmental flows are given by pij Z cijDt, for
i s j, where, cij Z fij/xj; and for i Z j, pii Z 1 C ciiDt,
where cii Z #Ti/xi (Matis and Patten, 1981). The
dimensional quantities cii and cij are elements of
a Jacobian ``community'' matrix, C Z (cij). This matrix
type is typically employed in population-community
ecology for stability or food-web analyses. By introducing small enough time steps Dt into the ciiDt and cijDt
values, dimensionless pii and pij quantities are obtained
that lie in the range 0 % pii, pij % 1, and thus are
interpretable as probabilities (Barber, 1978). From the
matrix P Z ( pij) of such probabilities, a dimensionless
integral storage intensity matrix Q Z (qij) can be
computed as the convergent power series:

QZP0CP1CP2CP3C/CPmC/Z!I#P"#1; !1"
where P0 Z I is the identity matrix. The m-th order
terms, m Z 1, 2,., account for interflows over all
pathways in the system of lengths m, cm. In so doing
the network has a graph theory property known as
transitive closure (Patten et al., 1976). Input-oriented,
storage-specific, intercompartmental flows are given by
p#ij Z c#ijDt, where for i s j, c#ij Z fij/xi, and for i Z j,
p#ii Z 1 C c#iiDt, where c#ii Z #Ti/xi (MATLAB! uses P#
to denote the transpose of P, therefore we use an
additional ``P'' to designate ``prime'' such that P#

377B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405
becomes PP, and Q# becomes QP below, etc. in the
code). Note the output-oriented values were normalized
by the donating compartment storage, xj, and the inputoriented values by the receiving compartmental storages, xi. From the matrix P# Z ( p#ij), a dimensionless,
integral, input-oriented, storage intensity matrix
Q# Z (q#ij) can be computed:

Q#Z!P#"0C!P#"1C!P#"2C!P#"3C/C!P#"mC/

Z!I # P#"#1: !2"

The nondimensional output-oriented integral storage
matrix Q in Eq. (1) can be redimensionalized by
multiplying by the input vector, z and the time step,
Dt, such that x Z QzDt; and the nondimensional inputoriented integral storage matrix Q# in Eq. (2) can be
redimensionalized by pre-multiplying by the output
vector, y and the time step, Dt, such that x Z yQ#Dt
(order of multiplication for the scalar time step is
irrelevant). In some cases, it is also useful to examine the
dimensional form of the integral matrix, which we
include as S Z QDt. The software returns C, C#, P, P#,
Q, and Q#, S, and S#.

3.3.2. Throughflow analysis

Similar to the case for storage analysis, nondimensional, output-oriented, intercompartmental flows are
given by, gij Z fij/Tj; and, input-oriented, intercompartmental flows are given by, g#ij Z fij/Ti. The dimensionless gij and g#ij quantities lie in the range 0 % gij, g#ij % 1,
and thus are interpretable as probabilities. From the
matrices G Z ( gij) and G# Z ( g#ij), dimensionless integral
output and input flow intensity matrices N Z (nij) and
N# Z (n#ij) can be computed similar to Eq. (1) from the
convergent power series:

NZG0CG1CG2CG3C/CGmC/Z!I # G"#1; !3"
and
N#Z!G#"0C!G#"1C!G#"2C!G#"3C/C!G#"mC/

Z!I # G#"#1; !4"

where G0 Z I is again the identity matrix, and the m-th
order terms, m Z 1, 2,., account for interflows over all
pathways in the system of lengths m. The nondimensional output-oriented integral flow matrix can be
redimensionalized by multiplying by the input vector,
z, such that T Z Nz and the nondimensional inputoriented integral flow matrix can be redimensionalized
by pre-multiplying by the output vector, y, such that
T Z yN#. The software returns G, G#, N, and N# as well
as several system-level summary flow parameters.

3.3.3. Utility analysis

Intercompartmental flow utilities are given by,
dij Z ( fij # fji)/Ti. The dimensionless dii quantities lie in
the range #1 % dii % 1, and thus are not interpretable as
probabilities. They do, however, conform to the
requirements of a convergent series so long as the
magnitude of the largest eigenvalue is less than one.
Therefore, a test must be executed before the flow utility
power series is taken. Networks found not to fulfill the
convergence property are excluded from the utility
analysis and flagged in the software output as #9999.
From the matrix D Z (dij), a dimensionless integral
utility intensity matrix U Z (uij) can be computed:

UZD0CD1CD2CD3C/CDmC/Z!I # D"#1: !5"
Note for completeness direct storage utilities could be
derived from dsij Z ( fij # fji)/xi and integral storage
utilities given by the following power series (convergence
restrictions apply):

USZDS0CDS1CDS2CDS3C/CDSmC/

Z!I # DS"#1; !6"

however, this parameter has not been thoroughly
investigated or presented in the NEA literature. The
nondimensional integral flow and storage utility matrices can be redimensionalized by multiplying by the
diagonalized throughflow vector, T^ , such that Y Z UT^
and YS Z UST^ . The software returns D, DS, U, US, Y,
and YS.

3.3.4. Control analysis

Patten (1978b) introduced a Network Environ
Analysis based measure of control or dominance (see
also Patten and Auble, 1981; Patten, 1982; Fath, 2004b).
The measure, expressed in a matrix CN Z (cnij), is based
on the ratio of integral flow from compartment j to i to
the integral flow from i to j. Compartment j is said to
dominate i if its output environ e!ect on i is larger than
is input environ e!ect on j (cnij Z nij/n#ji O 1). This
control relationship was further modified such that
when nij/n#ji ! 1, cnij Z 1 # nij/n#ji otherwise cnij Z 0. The
storage version of this measure is CQ, where cqij Z qij/
q#ji. The storage-based dominance relationships are
always identical to the throughflow-based measures
because intensive throughflows and storages are related
by the compartment turnover ratesdwhich cancel out in
the ratio measure. NEA.m calculates both CN and CQ.

4. Network and environ properties

In this section, we introduce the specific properties
the software returns. A listing and brief description of

378 B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405
each of these is given in Table 1. The formulas can be
found in the code in Appendix A.

4.1. Unit environ analysis

The first property is the quantitative environ, both in
the input and output orientation. Since each compartment has two distinct environs there are 2n environs in
total in an n-compartment system. The output environ
Ek Z (eijk) (i Z 1, 2,., n C 1, j Z 1, 2,., n C 1, k Z 1,
2,., n) for the k-th compartment is calculated by
multiplying G times the diagonalized matrix of the
k-th column of N minus the diagonal of the k-th column
of N, such that eijk Z gij ! diag(nik) # diag(nik) for
i Z 1, 2,., n, j Z 1, 2,., n. In MATLAB code:
E(1:n,1:n,k) Z G ! diag(N(:,k)) # diag(N(:,k)); when
constructed in the manner, elements on the principle
diagonal of Ek are the negative throughflows of each
compartment generated by the unit input. The column
sums of Ek (i Z 1, 2,., n, j Z 1, 2,., n) give the
negative output vector which is multiplied by #1 and
incorporated into Ek as row n C 1, and row sums the
negative input vector which is multiplied by #1 and
incorporated into Ek as column n C 1. When assembled,
the result is the output oriented flow from each

compartment to each other compartment in the system
and across the system boundary. In a similar fashion,
input environs are calculated by multiplying the diagonalized matrix of the k-th column of N# by G# minus
the diagonal of the k-th column of N# (in code: EP
(1:n,1:n,i) Z diag(NP(k,:)) ! GP # diag(NP(k,:))). Input
(SE#) and output (SE) oriented storage environs are
calculated in analogous fashion using P, Q, P#, and Q#
(Matis and Patten, 1981). These results comprise the
foundation of Network Environ Analysis since they
allow for the quantification of all within system
interactions, both direct and indirect, on a compartment-by-compartment basis. In the software, E, E#, SE,
and SE# are returned as n C 1 ! n C 1 ! n arrays. The
n C 1 row is the unit output vector and the n C 1
column is the unit input vector for each n environs.

4.2. Indirect to direct e!ects measure

This property is one of the most important since it
compares the strength of indirect (non-touching) flow in
the compartment's environ to the direct flow. Indirect
e!ects are calculated as the integral contributions minus
the direct and initial boundary input. The indirect to
direct e!ects ratio is a measure of the relative strength of

Table 1
Network parameters and environ properties returned by MATLAB! function in ep30 ! 1 vector

# Abbreviation Short description
[1] `# nodes, n' number of nodes or compartments
[2] `# links, L' number of direct flows or arcs
[3] `connectance, L/n2' connectance
[4] `link density, L/n' link density
[5] `path proliferation' l1!A"Zrate of pathway proliferation !dominant eigenvalue of A"
[6] `TST' total system throughflow
[7] `Cycling Index (T )' cycling index for throughflow Z TSTc/TST
[8] `MODE_0 boundary' boundary input
[9] `MODE_1, 1st pass' first-passage flow
[10] `MODE_2, cycled' cycled flow
[11] `MODE_3, dissipative' last passage dissipative flow
[12] `MODE_4, boundary' boundary output
[13] `Amp (T, output)' network amplification (throughflow, output)
[14] `Amp (T, input)' network amplification (throughflow, input)
[15] `I/D (T, output)' indirect-to-direct effects ratio or network nonlocality (throughflow, output)
[16] `I/D (T, input)' indirect-to-direct effects ratio or network nonlocality (throughflow, input)
[17] `Homog(T,output)' network homogenization (throughflow, output)
[18] `Homog(T,input)' network homogenization (throughflow, input)
[19] `Aggradation' network aggradation Z TST/Pz Z average path length
[20] `Cycling Index (S )' cycling index calculated for storage analysis
[21] `Amp (S, output)' network amplification (storage, output)
[22] `Amp (S, input)' network amplification (storage, input)
[23] `I/D (S, output)' indirect-to-direct ratio or network nonlocality (storage, output)
[24] `I/D (S, input)' indirect-to-direct ratio or network nonlocality (storage, input)
[25] `Homog(S,output)' network homogenization (storage, output)
[26] `Homog(S,input)' network homogenization (storage, input)
[27] `Synergism(T )' benefit-cost ratio or network synergism (throughflow)
[28] `Mutualism(T )' positive to negative interaction ratio or network mutualism (throughflow)
[29] `Synergism(S )' benefit-cost ratio or network synergism (storage)
[30] `Mutualism(S )' positive to negative interaction ratio or network mutualism (storage)

379B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405
these two factors. Mathematically, this is simply the
following ratio for the output oriented throughflow
case: I=DZ!PniZ1 PnjZ1 !nij # iij # gij""=!PniZ1 PnjZ1 gij".
When the ratio is greater than one, indirect flows are
greater than direct flows. This ratio can be calculated for
the input and output oriented throughflow and storage
analyses (respectively, these are denoted as I/D(T,in),
I/D(T,out), I/D(S,in), I/D(S,out)). Analysis of many
models has shown that these ratios are often greater than
one, indicating the non-intuitive result that indirect
e!ects have greater contribution than direct e!ects
(Higashi and Patten, 1989). This is core evidence for
the rationale behind systems modeling and systems
perspective because it states that indirect e!ects are
greater, therefore exerting greater dominance, than
direct e!ects in a network. This clearly has implications
for understanding feedback and direct versus indirect
control in networks.

4.3. Network homogenization

The homogenization property yields a comparison of
resource distribution between the direct and integral
flow intensity matrices. Due to the contribution of
indirect pathways, flow in the integral matrix tends to be
more evenly distributed than that in the direct matrix. A
statistical comparison of the distributions can be made
by calculating the coe"cient of variation of the direct
and integral matrices (Fath and Patten, 1999b). For
example, the coe"cient of variation of the direct flow
intensity matrix G is given by:

CV!G"Z #########################P

n
jZ1 P

n
iZ1 !

gij#gij"2

!n2#1"s

gij ; !7"

where gij is the mean of the elements of G.

Network homogenization occurs in the output
oriented throughflow case when the coe"cient of
variation of N is less than the coe"cient of variation
of G because this indicates that the network flow is more
evenly distributed in the integral matrix. The test
statistic employed here looks at whether the ratio
CV(G)/CV(N) exceeds one. In a similar fashion, this
measure can be applied to the input throughflow and
the input and output oriented storage cases. These
measures are denoted as Homog(T,in), Homog(T,out),
Homog(S,in), Homog(S,out).

4.4. Network amplification

The amplification property deals explicitly with the
values in the integral flow or storage matrices. Diagonal
elements of N (Q) are almost always great than one.
O!-diagonal elements, representing the integral flow

from j to i, rarely are, but can exceed one when cycling
drives more than the equivalent of one unit of input flow
over the pathways linking those two compartments. If
any o!-diagonal element of N (Q) is greater than one,
then amplification is said to occur because a virtual
input or output of one is implied by the nondimensional
analysis. This measure can be applied to both the input
and output orientations, and is notated as Amp(T,in),
Amp(T,out), Amp(S,in), Amp(S,out).

4.5. Network synergism

Synergism implies that positive utility exceeds negative utility in the system. Utility is the throughflow or
storage scaled value of net transactions between entity
pairs. To determine whether this occurs a comparison is
made between positive and negative utilities of the
dimensionalized integral utility matrix, Y Z UT^ , which
quantifies the magnitude of the positive and negative
utilities. Synergism is said to occur when the magnitude
of positive utility exceeds the magnitude of negative
utility, which is the same as saying the ratio of the
positive to negative utility exceeds one (Patten, 1991;
Fath and Patten, 1998). For completeness, we include
the application of this measure to the storage case,
though this parameter has not been thoroughly investigated nor previously presented in the literature.
These ratios are denoted as Synergism(T ) and Synergism(S ).

4.6. Network mutualism

In addition to quantifying the direct and indirect
relations the utility matrix can be used to determine
qualitative relations between any two components in the
network such as predation, mutualism, or competition.
Entries in the direct utility matrix, D, or integral utility
matrix, U, can be positive or negative (#1 % dij, uij % 1).
The elements of D represent the direct relation between
that (i,j ) pairing and the elements of U the integral
relations, respectively (Patten, 1991; Fath and Patten,
1998). The direct matrix D, being zero-sum between
complementary pairs dij and dji, always has the same
number of positive and negative signs. Signs in the
integral matrix, U, are determined by the entire web of
system interactions. If there are more positive signs than
negative signs in the integral utility matrix, then network
mutualism is said to occur. Network mutualism reveals
the preponderance of positive mutualistic relations in
the system. Again for completeness, we include the
application of this measure to the storage case, though it
has not been thoroughly investigated nor previously
presented in the NEA literature. These ratios are
denoted as Mutualism(T ) and Mutualism(S ).

380 B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405
4.7. Mode partitioning

Flow (and flow derived storage) into and out of
a specific compartment can be partitioned into five
categories or modes: (0) boundary input, (1) first
passage, (2) cycled, (3) dissipative, and (4) boundary
output, depending on its position relative to the focal
compartment. Because this is a partition the modes are
mutually exclusive and exhaustive (Fath et al., 2001).
Boundary input is flow that starts from the environment
and crosses the system boundary into a compartment
within the system. It is calculated as Iz, where I is the
identity matrix. First passage flow, or mode 1, is flow
from any compartment that reaches another (focal)
compartment for the very first time. Note, since this is
compartment specific, flow cycled between other compartments en route to the focal compartment for the first
time is still considered first passage. For example, firstpassage flow to compartment k from i could have
traveled the following path: i / j / i / j / k. Cycled
flow, or mode 2, is calculated using a derivation of the
Finn (1976, 1978) cycling index and represents the
amount of flow that has exited a compartment but will
return again to that same compartment before being lost
from the system such that the compartment in question
is both the originating and terminating node for that
pathway. Dissipative, mode 3 flow has left the focal
compartment never to return again, although it passes
through other compartments before crossing the system
boundary. Boundary output, mode 4, is flow that exits
the system boundary directly from the focal compartment in question. Mode partitioning is described more
fully by Higashi et al. (1993) and Fath et al. (2001).

5. Software

NEA.m is a MATLAB! function created to rapidly
perform NEA on flow-storage network models (available from http://www.mathworks.com/matlabcentral/
fileexchange/loadCategory.do and in Appendix A).
The function implements algorithms for all analyses
described in Sections 3 and 4. It requires one input
variable, DnC1!nC2, that summarizes the flow and
storage information for the system of interest. The
function returns a vector of the system-level environ
properties (ep30!1) to the workspace (Table 1), displays
the comprehensive list of analytical results in the
command window, and saves all results as a MATLAB!
data file called NEA_output.mat.

5.1. Input data

The input argument DnC1!nC2 is an (n C 1) !
(n C 2) composite matrix that summarizes the system
information of the flow-storage network to be analyzed,

where n is the number of compartments or nodes of the
network. The composite input matrix is:

DZ$ Fn!n zn!1 xn!1y

1!n 0 0 %nC1!nC2;

where Fn!n is the steady-state intercompartmental flow
matrix, zn!1 is the steady-state boundary input, y1!n is
the steady-state boundary output, and xn!1 is the
storage value. D is oriented such that flows are from
columns to rows.

In its present form, Network Environ Analysis makes
two critical assumptions about the input data. First,
flows and storages must be measured in a consistent
conservative energy-matter unit. For example, all fluxes
could have units of g C m#2 y#1 or mg P cm#3 d#1, while
the corresponding storages would be g C m#2 or
mg P cm#3. Second, the data must represent a static,
steady-state system (T(in) Z T(out)). When implemented,
NEA.m checks whether the model meets a steady-state
requirement (defined as within a certain tolerance of
0.05% of throughflow at each node). If the model does
not meet this requirement, then a warning is given and
the analysis does not proceed. It would be necessary to
more accurately balance the network flows; algorithms
for this are available (Savenko! et al., 2001; Allesina
and Bondavalli, 2003). The static, steady-state assumption is a limitation of the methodology because few
ecological systems exist in this condition. Despite this
limitation, important insights emerge that appear to
challenge conventional ecological theorydsuch as
energy cycling (Patten, 1985) and the dominance of
indirect e!ects (Higashi and Patten, 1989; Patten, in
preparation). Nonetheless, further work, like that
initiated by Hippe (1983), to develop a dynamic
Network Environ Analysis, is needed.

The input variable can be coded as a MATLAB!
function so that system data do not need to be reentered
multiple times. An example data function for an oyster
reef model (Dame and Patten, 1981) is included with
NEA.m.

5.2. Implementing NEA.m and data output

Once NEA.m is installed in the MATLAB! operating
directory, the function can be implemented on D by
typing ``ep Z NEA(D);'' in the command window.
Resultant matrices from structural, throughflow, utility,
unit environ analyses as well as a table of the system-level
environ indices will be displayed in the command
window. The system-level indices are also returned to
the workspace as the vector `ep' (Table 1). All results are
stored in the MATLAB! data file `NEA_output.mat'.
This file can be loaded into the workspace, giving the user
access to all resultant matrices for additional investigation and manipulation. Typing ``ep Z NEA(D,0);'' will

381B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405
prevent the results from displaying in the command
window.

While all results displayed in the command window
can by cut and pasted into word processing or
spreadsheet programs, there is a simple way to capture
the results in an ASCII text file using the diary function
in MATLAB!. To use this function, type diary
(`file_name.txt') in the command window, where
`file_name' is the name of the output file you are
creating. Then, run NEA.m by typing ``NEA(D);'' or
``ep Z NEA(D);''. When the computations are complete, type ``diary off'' to turn off the diary function.
This file can then be opened in any text editor. Example
NEA_output.mat and diary files for the Oyster Reef
Model (Dame and Patten, 1981) are included with the
software and in Appendix B.

6. Conclusion

Network Environ Analysis is one branch of Ecological Network Analysis. It is a powerful tool for
investigating the within-system transactions and relations in ecological systems. The software presented
herein can be used to calculate the primary parameters
and properties of Network Environ Analysis. The
analysis itself is not computationally challenging, but
does require some familiarity with matrix algebra and
graph theory concepts. The software compiles the

algorithms and should facilitate use of the methodology.
Network Environ Analysis is an active area of research
such that not all of its facets could be included here.
Also, while the software provides the quantitative
results, the challenging task of interpretation is left to
the user. Previous applications of Network Environ
Analysis (Matis and Patten, 1981; Patten and Matis,
1982; Flebbe, 1983; Patten, 1983, in preparation) may be
useful guides for interpretation. It is our intention that
dissemination of this software will encourage others to
look more closely at the environ methods and be aided
in applying them in their own research.

Acknowledgements

The computational methods and algorithms for the
mathematical system theory of environment that we
summarize and code here were developed through
collaboration between several people over many years.
We wish to acknowledge Bernard C. Patten who has
served as the chief orchestrator and the following
collaborators: M. Craig Barber, Robert W. Bosserman,
Thomas P. Burns, John T. Finn, Masahiko Higashi,
James Hill, IV, James H. Matis, and Stuart J. Whipple.
This manuscript benefited from comments by Bernard C.
Patten and anonymous reviewers. SRB was supported in
part by a grant from the National Science Foundation
(OPP-00-83381).

382 B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405
Appendix A. A function for Network Environ Analysis expressed in MATLAB notation

383B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405384 B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405 385B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405386 B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405 387B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405388 B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405 389B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405390 B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405 391B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405
Appendix B. Results from NEA.m analysis of Oyster Reef Model
392 B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405 393B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405394 B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405 395B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405396 B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405 397B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405398 B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405 399B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405400 B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405
Appendix C. Glossary of Network Environ Analysis notation

401B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405402 B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405
Appendix D. A glossary of primary MATLAB notation used in Appendix A

403B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405

References
Allesina, S., Bondavalli, C., 2003. Steady state of ecosystem flow

networks: a comparison between balancing procedures. Ecological
Modelling 165, 221-229.
Allesina, S., Bondavalli, C., 2004. Wand: an ecological network

analysis user-friendly tool. Environmental Modelling and Software
19 (4), 337-340.
Barber, M.C., 1978. A Markovian model for ecosystem flow analysis.

Ecological Modelling 5, 193-206.
Borrett, S.R., Patten, B.C., 2003. Structure of pathways in ecological

networks: relationships between length and number. Ecological
Modelling 170 (2-3), 173-184.
Caswell, H., 2001. Matrix Population Models: Construction, Analysis,

and Interpretation. Sinauer Associates, Sunderland, MA.
Dame, R.F., Patten, B.C., 1981. Analysis of energy flows in an

intertidal oyster reef. Marine Ecology Progress Series 5, 115-124.
Fath, B.D., 1998. Network analysis: foundations, extensions, and

applications of a systems theory of the environment. Ph.D. thesis,
University of Georgia, Athens, Georgia.
Fath, B.D., 2004a. Network analysis in perspective: comments on

WAND: an ecological network analysis user friendly tool.
Environmental Modelling and Software 19, 341-343.
Fath, B.D., 2004b. Distributed control in ecological networks.

Ecological Modelling 179, 235-246.
Fath, B.D., Patten, B.C., 1998. Network synergism: emergence of

positive relations in ecological systems. Ecological Modelling 107,
127-143.
Fath, B.D., Patten, B.C., 1999a. Review of the foundations of network

environ analysis. Ecosystems 2, 167-179.
Fath, B.D., Patten, B.C., 1999b. Quantification of resource homogenization using network flow analysis. Ecological Modelling 123,
193-205.
Fath, B.D., Patten, B.C., Choi, J.S., 2001. Complementarity of ecological goal functions. Journal of Theoretical Biology 208, 493-506.
Finn, J.T., 1976. Measures of ecosystem structure and function derived

from analysis of flows. Journal of Theoretical Biology 56, 363-380.
Finn, J.T., 1978. Cycling index: a general measure of cycling in

compartmental models. In: Adriano, D.C., Brisbin, I.L. (Eds.),
Environmental Chemistry and Cycling Processes Symposium.
U.S. Energy Research and Development Administration, Washington, DC, pp. 138-164.

Flebbe, P.A., 1983. Aquatic carbon cycle in Okefenokee swamp

habitats: environ analysis. In: Lauenroth, W.K., Skogerboe, G.V.,
Flug, M. (Eds.), Analysis of Ecological Systems: State-of-the-art in
Ecological Modelling. Elsevier, Amsterdam.
Hannon, B., 1973. The structure of ecosystems. Journal of Theoretical

Biology 41, 535-546.
Herendeen, R.A., 1981. Energy intensity in ecological and economic

systems. Journal of Theoretical Biology 91, 607-620.
Herendeen, R.A., 1989. Energy intensity, residence time, exergy, and

ascendency in dynamic ecosystems. Ecological Modelling 48, 19-44.
Higashi, M., Burns, T.P. (Eds.), 1991. Theoretical Studies of

Ecosystems: The Network Perspective. Cambridge University
Press, New York.
Higashi, M., Patten, B.C., Burns, T.P., 1993. Network trophic

dynamicsdthe modes of energy-utilization in ecosystems. Ecological Modelling 66 (1-2), 1-42.
Higashi, M., Patten, B.C., 1989. Dominance of indirect causality in

ecosystems. American Naturalist 133, 288-302.
Hippe, P.W., 1983. Environ analysis of linear compartmental systems:

The dynamic, time-invariant case. Ecological Modelling 19, 1-26.
Leontief, W.W., 1951. The Structure of American Economy, 1919-

1939: An Empirical Application of Equilibrium Analysis. Oxford
University Press, New York.
Leontief, W.W., 1966. Input-output Economics. Oxford University

Press, New York.
Mason, H.L., Langenheim, J.H., 1957. Language and the concept of

environment. Ecology 38, 325-340.
Matis J.H., Patten, B.C., 1981. Environ analysis of linear compartmental systems: the static, time invariant case. Proceedings of the 42nd
Session International Statistics Institute, Manila, Philippines, 1979.
Patten, B.C., 1978a. Systems approach to the concept of environment.

Ohio Journal of Science 78, 206-222.
Patten, B.C., 1978b. Energy environments in ecosystems. In:

Fazzolare, R.A., Smith, C.B. (Eds.), Energy use management,
vol. IV. Pergamon Press, New York.
Patten, B.C., 1981. Environs: the superniches of ecosystems. American

Zoologist 21, 845-852.
Patten, B.C., 1982. Environs: relativistic elementary particles or

ecology. American Naturalist 119, 179-219.
Patten, B.C., 1983. On the quantitative dominance of indirect e!ects in

ecosystems. In: Lauenroth, W.K., Skogerboe, G.V., Flug, M.
(Eds.), Analysis of Ecological Systems: State-of-the-art in Ecological Modelling. Elsevier, Amsterdam.

404 B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405
Patten, B.C., 1985. Energy cycling in the ecosystem. Ecological

Modelling 28, 1-71.
Patten, B.C., 1991. Network ecology: indirect determination of the

life-environment relationship in ecosystems. In: Higashi, M.,
Burns, T.P. (Eds.), Theoretical Ecosystem Ecology: The Network
Perspective. Cambridge University Press, London.
Patten, B.C. Holoecology: the unification of nature by network indirect

e!ects. Columbia University Press: New York, in preparation.
Patten, B.C., Bosserman, R.W., Finn, J.T., Cale, W.G., 1976.

Propagation of cause in ecosystems. In: Patten, B.C. (Ed.), Systems
analysis and simulation in ecology, vol. IV. Academic Press, New
York.
Patten, B.C., Auble, G.T., 1981. System theory of the ecological niche.

American Naturalist 117, 893-922.
Patten, B.C., Higashi, M., Burns, T.P., 1990. Trophic dynamics in

ecosystem networks: significance of cycles and storage. Ecological
Modelling 51, 1-28.

Patten, B.C., Matis, J.H., 1982. The water environs of the Okefenokee

Swamp: an application of static linear environ analysis. Ecological
Modelling 16, 1-50.
Savenko!, C., Vezina, A.F., Bundy, A., 2001. Inverse analysis of the

structure and dynamics of the whole NewfoundlanddLabrador
Shelf ecosystem. Canadian Technical Report of Fisheries and
Aquatic Sciences 2354, 56.
Ulanowicz, R.E., 1980. An hypothesis on the development of natural

communities. Journal of Theoretical Biology 85, 223-245.
Ulanowicz, R.E., 1982. NETWRK 4.2b: a package of computer

algorithms to analyze ecological flow networks. Copyright 1982,
1987, 1998, 1999, 2002. UMCEES Ref. No. 82-7 CBL. http://
www.cbl.cees.edu/wulan/ntwk/netwrk.txt.
Ulanowicz, R.E., 1986. Growth and Development: Ecosystem

Phenomenology. Springer-Verlag, New York.
Ulanowicz, R.E., 1997. Ecology, the Ascendent Perspective. Columbia

University Press, New York.

405B.D. Fath, S.R. Borrett / Environmental Modelling & Software 21 (2006) 375-405